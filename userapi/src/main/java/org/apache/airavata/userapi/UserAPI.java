/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.userapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-7-25")
public class UserAPI {

  public interface Iface {

    /**
     * Query UserAPI to fetch the API version
     */
    public String getAPIVersion() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Authenticate Gateway
     * 
     * 
     * @param username
     * @param password
     */
    public org.apache.airavata.userapi.models.AuthenticationResponse authenticateGateway(String username, String password) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, TException;

    /**
     * Check username exists
     * 
     * 
     * @param username
     * @param token
     */
    public boolean checkUsernameExists(String username, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Add new user
     * 
     * 
     * @param userName
     * @param password
     * @param userProfile
     * @param token
     */
    public void createNewUser(String userName, String password, org.apache.airavata.userapi.models.UserProfile userProfile, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Update user profile
     * 
     * 
     * @param userName
     * @param userProfile
     * @param token
     */
    public void updateUserProfile(String userName, org.apache.airavata.userapi.models.UserProfile userProfile, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Get user profile
     * 
     * 
     * @param userName
     * @param token
     */
    public org.apache.airavata.userapi.models.UserProfile getUserProfile(String userName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Remove user
     * 
     * 
     * @param userName
     * @param token
     */
    public void removeUser(String userName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Update user password
     * 
     * 
     * @param userName
     * @param newPassword
     * @param oldPassword
     * @param token
     */
    public void updateUserPassword(String userName, String newPassword, String oldPassword, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Authenticate user
     * 
     * 
     * @param userName
     * @param password
     * @param token
     */
    public org.apache.airavata.userapi.models.APIPermissions authenticateUser(String userName, String password, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, TException;

    /**
     * Add user to a role
     * 
     * 
     * @param userName
     * @param roleName
     * @param token
     */
    public void addUserToRole(String userName, String roleName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Remove user from role
     * 
     * 
     * @param userName
     * @param roleName
     * @param token
     */
    public void removeUserFromRole(String userName, String roleName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Get user list of a particular role
     * 
     * 
     * @param roleName
     * @param token
     */
    public List<String> getUserListOfRole(String roleName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Get role list of a particular user
     * 
     * 
     * @param username
     * @param token
     */
    public List<String> getRoleListOfUser(String username, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Get list of all roles
     * 
     * 
     * @param token
     */
    public List<String> getAllRoleNames(String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Get permission for user
     * 
     * 
     * @param username
     * @param token
     */
    public org.apache.airavata.userapi.models.APIPermissions getUserPermissions(String username, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

    /**
     * Check permission for permission string
     * 
     * 
     * @param username
     * @param permissionString
     * @param token
     */
    public boolean checkPermission(String username, String permissionString, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException;

  }

  public interface AsyncIface {

    public void getAPIVersion(AsyncMethodCallback resultHandler) throws TException;

    public void authenticateGateway(String username, String password, AsyncMethodCallback resultHandler) throws TException;

    public void checkUsernameExists(String username, String token, AsyncMethodCallback resultHandler) throws TException;

    public void createNewUser(String userName, String password, org.apache.airavata.userapi.models.UserProfile userProfile, String token, AsyncMethodCallback resultHandler) throws TException;

    public void updateUserProfile(String userName, org.apache.airavata.userapi.models.UserProfile userProfile, String token, AsyncMethodCallback resultHandler) throws TException;

    public void getUserProfile(String userName, String token, AsyncMethodCallback resultHandler) throws TException;

    public void removeUser(String userName, String token, AsyncMethodCallback resultHandler) throws TException;

    public void updateUserPassword(String userName, String newPassword, String oldPassword, String token, AsyncMethodCallback resultHandler) throws TException;

    public void authenticateUser(String userName, String password, String token, AsyncMethodCallback resultHandler) throws TException;

    public void addUserToRole(String userName, String roleName, String token, AsyncMethodCallback resultHandler) throws TException;

    public void removeUserFromRole(String userName, String roleName, String token, AsyncMethodCallback resultHandler) throws TException;

    public void getUserListOfRole(String roleName, String token, AsyncMethodCallback resultHandler) throws TException;

    public void getRoleListOfUser(String username, String token, AsyncMethodCallback resultHandler) throws TException;

    public void getAllRoleNames(String token, AsyncMethodCallback resultHandler) throws TException;

    public void getUserPermissions(String username, String token, AsyncMethodCallback resultHandler) throws TException;

    public void checkPermission(String username, String permissionString, String token, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getAPIVersion() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_getAPIVersion();
      return recv_getAPIVersion();
    }

    public void send_getAPIVersion() throws TException
    {
      getAPIVersion_args args = new getAPIVersion_args();
      sendBase("getAPIVersion", args);
    }

    public String recv_getAPIVersion() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      getAPIVersion_result result = new getAPIVersion_result();
      receiveBase(result, "getAPIVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAPIVersion failed: unknown result");
    }

    public org.apache.airavata.userapi.models.AuthenticationResponse authenticateGateway(String username, String password) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, TException
    {
      send_authenticateGateway(username, password);
      return recv_authenticateGateway();
    }

    public void send_authenticateGateway(String username, String password) throws TException
    {
      authenticateGateway_args args = new authenticateGateway_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("authenticateGateway", args);
    }

    public org.apache.airavata.userapi.models.AuthenticationResponse recv_authenticateGateway() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, TException
    {
      authenticateGateway_result result = new authenticateGateway_result();
      receiveBase(result, "authenticateGateway");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.are != null) {
        throw result.are;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authenticateGateway failed: unknown result");
    }

    public boolean checkUsernameExists(String username, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_checkUsernameExists(username, token);
      return recv_checkUsernameExists();
    }

    public void send_checkUsernameExists(String username, String token) throws TException
    {
      checkUsernameExists_args args = new checkUsernameExists_args();
      args.setUsername(username);
      args.setToken(token);
      sendBase("checkUsernameExists", args);
    }

    public boolean recv_checkUsernameExists() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      checkUsernameExists_result result = new checkUsernameExists_result();
      receiveBase(result, "checkUsernameExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkUsernameExists failed: unknown result");
    }

    public void createNewUser(String userName, String password, org.apache.airavata.userapi.models.UserProfile userProfile, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_createNewUser(userName, password, userProfile, token);
      recv_createNewUser();
    }

    public void send_createNewUser(String userName, String password, org.apache.airavata.userapi.models.UserProfile userProfile, String token) throws TException
    {
      createNewUser_args args = new createNewUser_args();
      args.setUserName(userName);
      args.setPassword(password);
      args.setUserProfile(userProfile);
      args.setToken(token);
      sendBase("createNewUser", args);
    }

    public void recv_createNewUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      createNewUser_result result = new createNewUser_result();
      receiveBase(result, "createNewUser");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void updateUserProfile(String userName, org.apache.airavata.userapi.models.UserProfile userProfile, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_updateUserProfile(userName, userProfile, token);
      recv_updateUserProfile();
    }

    public void send_updateUserProfile(String userName, org.apache.airavata.userapi.models.UserProfile userProfile, String token) throws TException
    {
      updateUserProfile_args args = new updateUserProfile_args();
      args.setUserName(userName);
      args.setUserProfile(userProfile);
      args.setToken(token);
      sendBase("updateUserProfile", args);
    }

    public void recv_updateUserProfile() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      updateUserProfile_result result = new updateUserProfile_result();
      receiveBase(result, "updateUserProfile");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public org.apache.airavata.userapi.models.UserProfile getUserProfile(String userName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_getUserProfile(userName, token);
      return recv_getUserProfile();
    }

    public void send_getUserProfile(String userName, String token) throws TException
    {
      getUserProfile_args args = new getUserProfile_args();
      args.setUserName(userName);
      args.setToken(token);
      sendBase("getUserProfile", args);
    }

    public org.apache.airavata.userapi.models.UserProfile recv_getUserProfile() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      getUserProfile_result result = new getUserProfile_result();
      receiveBase(result, "getUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserProfile failed: unknown result");
    }

    public void removeUser(String userName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_removeUser(userName, token);
      recv_removeUser();
    }

    public void send_removeUser(String userName, String token) throws TException
    {
      removeUser_args args = new removeUser_args();
      args.setUserName(userName);
      args.setToken(token);
      sendBase("removeUser", args);
    }

    public void recv_removeUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      removeUser_result result = new removeUser_result();
      receiveBase(result, "removeUser");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void updateUserPassword(String userName, String newPassword, String oldPassword, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_updateUserPassword(userName, newPassword, oldPassword, token);
      recv_updateUserPassword();
    }

    public void send_updateUserPassword(String userName, String newPassword, String oldPassword, String token) throws TException
    {
      updateUserPassword_args args = new updateUserPassword_args();
      args.setUserName(userName);
      args.setNewPassword(newPassword);
      args.setOldPassword(oldPassword);
      args.setToken(token);
      sendBase("updateUserPassword", args);
    }

    public void recv_updateUserPassword() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      updateUserPassword_result result = new updateUserPassword_result();
      receiveBase(result, "updateUserPassword");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public org.apache.airavata.userapi.models.APIPermissions authenticateUser(String userName, String password, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, TException
    {
      send_authenticateUser(userName, password, token);
      return recv_authenticateUser();
    }

    public void send_authenticateUser(String userName, String password, String token) throws TException
    {
      authenticateUser_args args = new authenticateUser_args();
      args.setUserName(userName);
      args.setPassword(password);
      args.setToken(token);
      sendBase("authenticateUser", args);
    }

    public org.apache.airavata.userapi.models.APIPermissions recv_authenticateUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, TException
    {
      authenticateUser_result result = new authenticateUser_result();
      receiveBase(result, "authenticateUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.ate != null) {
        throw result.ate;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authenticateUser failed: unknown result");
    }

    public void addUserToRole(String userName, String roleName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_addUserToRole(userName, roleName, token);
      recv_addUserToRole();
    }

    public void send_addUserToRole(String userName, String roleName, String token) throws TException
    {
      addUserToRole_args args = new addUserToRole_args();
      args.setUserName(userName);
      args.setRoleName(roleName);
      args.setToken(token);
      sendBase("addUserToRole", args);
    }

    public void recv_addUserToRole() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      addUserToRole_result result = new addUserToRole_result();
      receiveBase(result, "addUserToRole");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void removeUserFromRole(String userName, String roleName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_removeUserFromRole(userName, roleName, token);
      recv_removeUserFromRole();
    }

    public void send_removeUserFromRole(String userName, String roleName, String token) throws TException
    {
      removeUserFromRole_args args = new removeUserFromRole_args();
      args.setUserName(userName);
      args.setRoleName(roleName);
      args.setToken(token);
      sendBase("removeUserFromRole", args);
    }

    public void recv_removeUserFromRole() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      removeUserFromRole_result result = new removeUserFromRole_result();
      receiveBase(result, "removeUserFromRole");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public List<String> getUserListOfRole(String roleName, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_getUserListOfRole(roleName, token);
      return recv_getUserListOfRole();
    }

    public void send_getUserListOfRole(String roleName, String token) throws TException
    {
      getUserListOfRole_args args = new getUserListOfRole_args();
      args.setRoleName(roleName);
      args.setToken(token);
      sendBase("getUserListOfRole", args);
    }

    public List<String> recv_getUserListOfRole() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      getUserListOfRole_result result = new getUserListOfRole_result();
      receiveBase(result, "getUserListOfRole");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserListOfRole failed: unknown result");
    }

    public List<String> getRoleListOfUser(String username, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_getRoleListOfUser(username, token);
      return recv_getRoleListOfUser();
    }

    public void send_getRoleListOfUser(String username, String token) throws TException
    {
      getRoleListOfUser_args args = new getRoleListOfUser_args();
      args.setUsername(username);
      args.setToken(token);
      sendBase("getRoleListOfUser", args);
    }

    public List<String> recv_getRoleListOfUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      getRoleListOfUser_result result = new getRoleListOfUser_result();
      receiveBase(result, "getRoleListOfUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoleListOfUser failed: unknown result");
    }

    public List<String> getAllRoleNames(String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_getAllRoleNames(token);
      return recv_getAllRoleNames();
    }

    public void send_getAllRoleNames(String token) throws TException
    {
      getAllRoleNames_args args = new getAllRoleNames_args();
      args.setToken(token);
      sendBase("getAllRoleNames", args);
    }

    public List<String> recv_getAllRoleNames() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      getAllRoleNames_result result = new getAllRoleNames_result();
      receiveBase(result, "getAllRoleNames");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllRoleNames failed: unknown result");
    }

    public org.apache.airavata.userapi.models.APIPermissions getUserPermissions(String username, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_getUserPermissions(username, token);
      return recv_getUserPermissions();
    }

    public void send_getUserPermissions(String username, String token) throws TException
    {
      getUserPermissions_args args = new getUserPermissions_args();
      args.setUsername(username);
      args.setToken(token);
      sendBase("getUserPermissions", args);
    }

    public org.apache.airavata.userapi.models.APIPermissions recv_getUserPermissions() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      getUserPermissions_result result = new getUserPermissions_result();
      receiveBase(result, "getUserPermissions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserPermissions failed: unknown result");
    }

    public boolean checkPermission(String username, String permissionString, String token) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      send_checkPermission(username, permissionString, token);
      return recv_checkPermission();
    }

    public void send_checkPermission(String username, String permissionString, String token) throws TException
    {
      checkPermission_args args = new checkPermission_args();
      args.setUsername(username);
      args.setPermissionString(permissionString);
      args.setToken(token);
      sendBase("checkPermission", args);
    }

    public boolean recv_checkPermission() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException
    {
      checkPermission_result result = new checkPermission_result();
      receiveBase(result, "checkPermission");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkPermission failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAPIVersion(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAPIVersion_call method_call = new getAPIVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAPIVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAPIVersion_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAPIVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAPIVersion_args args = new getAPIVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAPIVersion();
      }
    }

    public void authenticateGateway(String username, String password, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      authenticateGateway_call method_call = new authenticateGateway_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticateGateway_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String password;
      public authenticateGateway_call(String username, String password, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticateGateway", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticateGateway_args args = new authenticateGateway_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.userapi.models.AuthenticationResponse getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticateGateway();
      }
    }

    public void checkUsernameExists(String username, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      checkUsernameExists_call method_call = new checkUsernameExists_call(username, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkUsernameExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String token;
      public checkUsernameExists_call(String username, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkUsernameExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkUsernameExists_args args = new checkUsernameExists_args();
        args.setUsername(username);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkUsernameExists();
      }
    }

    public void createNewUser(String userName, String password, org.apache.airavata.userapi.models.UserProfile userProfile, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      createNewUser_call method_call = new createNewUser_call(userName, password, userProfile, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createNewUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String password;
      private org.apache.airavata.userapi.models.UserProfile userProfile;
      private String token;
      public createNewUser_call(String userName, String password, org.apache.airavata.userapi.models.UserProfile userProfile, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.password = password;
        this.userProfile = userProfile;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createNewUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createNewUser_args args = new createNewUser_args();
        args.setUserName(userName);
        args.setPassword(password);
        args.setUserProfile(userProfile);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createNewUser();
      }
    }

    public void updateUserProfile(String userName, org.apache.airavata.userapi.models.UserProfile userProfile, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      updateUserProfile_call method_call = new updateUserProfile_call(userName, userProfile, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private org.apache.airavata.userapi.models.UserProfile userProfile;
      private String token;
      public updateUserProfile_call(String userName, org.apache.airavata.userapi.models.UserProfile userProfile, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.userProfile = userProfile;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserProfile_args args = new updateUserProfile_args();
        args.setUserName(userName);
        args.setUserProfile(userProfile);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateUserProfile();
      }
    }

    public void getUserProfile(String userName, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getUserProfile_call method_call = new getUserProfile_call(userName, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String token;
      public getUserProfile_call(String userName, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserProfile_args args = new getUserProfile_args();
        args.setUserName(userName);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.userapi.models.UserProfile getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserProfile();
      }
    }

    public void removeUser(String userName, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      removeUser_call method_call = new removeUser_call(userName, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String token;
      public removeUser_call(String userName, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeUser_args args = new removeUser_args();
        args.setUserName(userName);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeUser();
      }
    }

    public void updateUserPassword(String userName, String newPassword, String oldPassword, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      updateUserPassword_call method_call = new updateUserPassword_call(userName, newPassword, oldPassword, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String newPassword;
      private String oldPassword;
      private String token;
      public updateUserPassword_call(String userName, String newPassword, String oldPassword, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.newPassword = newPassword;
        this.oldPassword = oldPassword;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserPassword_args args = new updateUserPassword_args();
        args.setUserName(userName);
        args.setNewPassword(newPassword);
        args.setOldPassword(oldPassword);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateUserPassword();
      }
    }

    public void authenticateUser(String userName, String password, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      authenticateUser_call method_call = new authenticateUser_call(userName, password, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String password;
      private String token;
      public authenticateUser_call(String userName, String password, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.password = password;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticateUser_args args = new authenticateUser_args();
        args.setUserName(userName);
        args.setPassword(password);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.userapi.models.APIPermissions getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authenticateUser();
      }
    }

    public void addUserToRole(String userName, String roleName, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      addUserToRole_call method_call = new addUserToRole_call(userName, roleName, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addUserToRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String roleName;
      private String token;
      public addUserToRole_call(String userName, String roleName, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.roleName = roleName;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addUserToRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addUserToRole_args args = new addUserToRole_args();
        args.setUserName(userName);
        args.setRoleName(roleName);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addUserToRole();
      }
    }

    public void removeUserFromRole(String userName, String roleName, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      removeUserFromRole_call method_call = new removeUserFromRole_call(userName, roleName, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeUserFromRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String roleName;
      private String token;
      public removeUserFromRole_call(String userName, String roleName, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.roleName = roleName;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeUserFromRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeUserFromRole_args args = new removeUserFromRole_args();
        args.setUserName(userName);
        args.setRoleName(roleName);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeUserFromRole();
      }
    }

    public void getUserListOfRole(String roleName, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getUserListOfRole_call method_call = new getUserListOfRole_call(roleName, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserListOfRole_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roleName;
      private String token;
      public getUserListOfRole_call(String roleName, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roleName = roleName;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserListOfRole", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserListOfRole_args args = new getUserListOfRole_args();
        args.setRoleName(roleName);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserListOfRole();
      }
    }

    public void getRoleListOfUser(String username, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getRoleListOfUser_call method_call = new getRoleListOfUser_call(username, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoleListOfUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String token;
      public getRoleListOfUser_call(String username, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoleListOfUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoleListOfUser_args args = new getRoleListOfUser_args();
        args.setUsername(username);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoleListOfUser();
      }
    }

    public void getAllRoleNames(String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getAllRoleNames_call method_call = new getAllRoleNames_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllRoleNames_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      public getAllRoleNames_call(String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllRoleNames", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllRoleNames_args args = new getAllRoleNames_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllRoleNames();
      }
    }

    public void getUserPermissions(String username, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getUserPermissions_call method_call = new getUserPermissions_call(username, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserPermissions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String token;
      public getUserPermissions_call(String username, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserPermissions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserPermissions_args args = new getUserPermissions_args();
        args.setUsername(username);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.airavata.userapi.models.APIPermissions getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserPermissions();
      }
    }

    public void checkPermission(String username, String permissionString, String token, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      checkPermission_call method_call = new checkPermission_call(username, permissionString, token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkPermission_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String permissionString;
      private String token;
      public checkPermission_call(String username, String permissionString, String token, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.permissionString = permissionString;
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkPermission", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkPermission_args args = new checkPermission_args();
        args.setUsername(username);
        args.setPermissionString(permissionString);
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkPermission();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAPIVersion", new getAPIVersion());
      processMap.put("authenticateGateway", new authenticateGateway());
      processMap.put("checkUsernameExists", new checkUsernameExists());
      processMap.put("createNewUser", new createNewUser());
      processMap.put("updateUserProfile", new updateUserProfile());
      processMap.put("getUserProfile", new getUserProfile());
      processMap.put("removeUser", new removeUser());
      processMap.put("updateUserPassword", new updateUserPassword());
      processMap.put("authenticateUser", new authenticateUser());
      processMap.put("addUserToRole", new addUserToRole());
      processMap.put("removeUserFromRole", new removeUserFromRole());
      processMap.put("getUserListOfRole", new getUserListOfRole());
      processMap.put("getRoleListOfUser", new getRoleListOfUser());
      processMap.put("getAllRoleNames", new getAllRoleNames());
      processMap.put("getUserPermissions", new getUserPermissions());
      processMap.put("checkPermission", new checkPermission());
      return processMap;
    }

    public static class getAPIVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAPIVersion_args> {
      public getAPIVersion() {
        super("getAPIVersion");
      }

      public getAPIVersion_args getEmptyArgsInstance() {
        return new getAPIVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAPIVersion_result getResult(I iface, getAPIVersion_args args) throws TException {
        getAPIVersion_result result = new getAPIVersion_result();
        try {
          result.success = iface.getAPIVersion();
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class authenticateGateway<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticateGateway_args> {
      public authenticateGateway() {
        super("authenticateGateway");
      }

      public authenticateGateway_args getEmptyArgsInstance() {
        return new authenticateGateway_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticateGateway_result getResult(I iface, authenticateGateway_args args) throws TException {
        authenticateGateway_result result = new authenticateGateway_result();
        try {
          result.success = iface.authenticateGateway(args.username, args.password);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        } catch (org.apache.airavata.userapi.error.AuthenticationException are) {
          result.are = are;
        }
        return result;
      }
    }

    public static class checkUsernameExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkUsernameExists_args> {
      public checkUsernameExists() {
        super("checkUsernameExists");
      }

      public checkUsernameExists_args getEmptyArgsInstance() {
        return new checkUsernameExists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkUsernameExists_result getResult(I iface, checkUsernameExists_args args) throws TException {
        checkUsernameExists_result result = new checkUsernameExists_result();
        try {
          result.success = iface.checkUsernameExists(args.username, args.token);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class createNewUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createNewUser_args> {
      public createNewUser() {
        super("createNewUser");
      }

      public createNewUser_args getEmptyArgsInstance() {
        return new createNewUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createNewUser_result getResult(I iface, createNewUser_args args) throws TException {
        createNewUser_result result = new createNewUser_result();
        try {
          iface.createNewUser(args.userName, args.password, args.userProfile, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserProfile_args> {
      public updateUserProfile() {
        super("updateUserProfile");
      }

      public updateUserProfile_args getEmptyArgsInstance() {
        return new updateUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserProfile_result getResult(I iface, updateUserProfile_args args) throws TException {
        updateUserProfile_result result = new updateUserProfile_result();
        try {
          iface.updateUserProfile(args.userName, args.userProfile, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserProfile_args> {
      public getUserProfile() {
        super("getUserProfile");
      }

      public getUserProfile_args getEmptyArgsInstance() {
        return new getUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserProfile_result getResult(I iface, getUserProfile_args args) throws TException {
        getUserProfile_result result = new getUserProfile_result();
        try {
          result.success = iface.getUserProfile(args.userName, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class removeUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeUser_args> {
      public removeUser() {
        super("removeUser");
      }

      public removeUser_args getEmptyArgsInstance() {
        return new removeUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeUser_result getResult(I iface, removeUser_args args) throws TException {
        removeUser_result result = new removeUser_result();
        try {
          iface.removeUser(args.userName, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateUserPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserPassword_args> {
      public updateUserPassword() {
        super("updateUserPassword");
      }

      public updateUserPassword_args getEmptyArgsInstance() {
        return new updateUserPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserPassword_result getResult(I iface, updateUserPassword_args args) throws TException {
        updateUserPassword_result result = new updateUserPassword_result();
        try {
          iface.updateUserPassword(args.userName, args.newPassword, args.oldPassword, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class authenticateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticateUser_args> {
      public authenticateUser() {
        super("authenticateUser");
      }

      public authenticateUser_args getEmptyArgsInstance() {
        return new authenticateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticateUser_result getResult(I iface, authenticateUser_args args) throws TException {
        authenticateUser_result result = new authenticateUser_result();
        try {
          result.success = iface.authenticateUser(args.userName, args.password, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        } catch (org.apache.airavata.userapi.error.AuthenticationException ate) {
          result.ate = ate;
        }
        return result;
      }
    }

    public static class addUserToRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addUserToRole_args> {
      public addUserToRole() {
        super("addUserToRole");
      }

      public addUserToRole_args getEmptyArgsInstance() {
        return new addUserToRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addUserToRole_result getResult(I iface, addUserToRole_args args) throws TException {
        addUserToRole_result result = new addUserToRole_result();
        try {
          iface.addUserToRole(args.userName, args.roleName, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class removeUserFromRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeUserFromRole_args> {
      public removeUserFromRole() {
        super("removeUserFromRole");
      }

      public removeUserFromRole_args getEmptyArgsInstance() {
        return new removeUserFromRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeUserFromRole_result getResult(I iface, removeUserFromRole_args args) throws TException {
        removeUserFromRole_result result = new removeUserFromRole_result();
        try {
          iface.removeUserFromRole(args.userName, args.roleName, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getUserListOfRole<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserListOfRole_args> {
      public getUserListOfRole() {
        super("getUserListOfRole");
      }

      public getUserListOfRole_args getEmptyArgsInstance() {
        return new getUserListOfRole_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserListOfRole_result getResult(I iface, getUserListOfRole_args args) throws TException {
        getUserListOfRole_result result = new getUserListOfRole_result();
        try {
          result.success = iface.getUserListOfRole(args.roleName, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getRoleListOfUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoleListOfUser_args> {
      public getRoleListOfUser() {
        super("getRoleListOfUser");
      }

      public getRoleListOfUser_args getEmptyArgsInstance() {
        return new getRoleListOfUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoleListOfUser_result getResult(I iface, getRoleListOfUser_args args) throws TException {
        getRoleListOfUser_result result = new getRoleListOfUser_result();
        try {
          result.success = iface.getRoleListOfUser(args.username, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getAllRoleNames<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllRoleNames_args> {
      public getAllRoleNames() {
        super("getAllRoleNames");
      }

      public getAllRoleNames_args getEmptyArgsInstance() {
        return new getAllRoleNames_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllRoleNames_result getResult(I iface, getAllRoleNames_args args) throws TException {
        getAllRoleNames_result result = new getAllRoleNames_result();
        try {
          result.success = iface.getAllRoleNames(args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class getUserPermissions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserPermissions_args> {
      public getUserPermissions() {
        super("getUserPermissions");
      }

      public getUserPermissions_args getEmptyArgsInstance() {
        return new getUserPermissions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserPermissions_result getResult(I iface, getUserPermissions_args args) throws TException {
        getUserPermissions_result result = new getUserPermissions_result();
        try {
          result.success = iface.getUserPermissions(args.username, args.token);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class checkPermission<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkPermission_args> {
      public checkPermission() {
        super("checkPermission");
      }

      public checkPermission_args getEmptyArgsInstance() {
        return new checkPermission_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkPermission_result getResult(I iface, checkPermission_args args) throws TException {
        checkPermission_result result = new checkPermission_result();
        try {
          result.success = iface.checkPermission(args.username, args.permissionString, args.token);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAPIVersion", new getAPIVersion());
      processMap.put("authenticateGateway", new authenticateGateway());
      processMap.put("checkUsernameExists", new checkUsernameExists());
      processMap.put("createNewUser", new createNewUser());
      processMap.put("updateUserProfile", new updateUserProfile());
      processMap.put("getUserProfile", new getUserProfile());
      processMap.put("removeUser", new removeUser());
      processMap.put("updateUserPassword", new updateUserPassword());
      processMap.put("authenticateUser", new authenticateUser());
      processMap.put("addUserToRole", new addUserToRole());
      processMap.put("removeUserFromRole", new removeUserFromRole());
      processMap.put("getUserListOfRole", new getUserListOfRole());
      processMap.put("getRoleListOfUser", new getRoleListOfUser());
      processMap.put("getAllRoleNames", new getAllRoleNames());
      processMap.put("getUserPermissions", new getUserPermissions());
      processMap.put("checkPermission", new checkPermission());
      return processMap;
    }

    public static class getAPIVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAPIVersion_args, String> {
      public getAPIVersion() {
        super("getAPIVersion");
      }

      public getAPIVersion_args getEmptyArgsInstance() {
        return new getAPIVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getAPIVersion_result result = new getAPIVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAPIVersion_result result = new getAPIVersion_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAPIVersion_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getAPIVersion(resultHandler);
      }
    }

    public static class authenticateGateway<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authenticateGateway_args, org.apache.airavata.userapi.models.AuthenticationResponse> {
      public authenticateGateway() {
        super("authenticateGateway");
      }

      public authenticateGateway_args getEmptyArgsInstance() {
        return new authenticateGateway_args();
      }

      public AsyncMethodCallback<org.apache.airavata.userapi.models.AuthenticationResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.userapi.models.AuthenticationResponse>() { 
          public void onComplete(org.apache.airavata.userapi.models.AuthenticationResponse o) {
            authenticateGateway_result result = new authenticateGateway_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authenticateGateway_result result = new authenticateGateway_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthenticationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthenticationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authenticateGateway_args args, AsyncMethodCallback<org.apache.airavata.userapi.models.AuthenticationResponse> resultHandler) throws TException {
        iface.authenticateGateway(args.username, args.password,resultHandler);
      }
    }

    public static class checkUsernameExists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkUsernameExists_args, Boolean> {
      public checkUsernameExists() {
        super("checkUsernameExists");
      }

      public checkUsernameExists_args getEmptyArgsInstance() {
        return new checkUsernameExists_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkUsernameExists_result result = new checkUsernameExists_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkUsernameExists_result result = new checkUsernameExists_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkUsernameExists_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkUsernameExists(args.username, args.token,resultHandler);
      }
    }

    public static class createNewUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createNewUser_args, Void> {
      public createNewUser() {
        super("createNewUser");
      }

      public createNewUser_args getEmptyArgsInstance() {
        return new createNewUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            createNewUser_result result = new createNewUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createNewUser_result result = new createNewUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createNewUser_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.createNewUser(args.userName, args.password, args.userProfile, args.token,resultHandler);
      }
    }

    public static class updateUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserProfile_args, Void> {
      public updateUserProfile() {
        super("updateUserProfile");
      }

      public updateUserProfile_args getEmptyArgsInstance() {
        return new updateUserProfile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateUserProfile_result result = new updateUserProfile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserProfile_result result = new updateUserProfile_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserProfile_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateUserProfile(args.userName, args.userProfile, args.token,resultHandler);
      }
    }

    public static class getUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserProfile_args, org.apache.airavata.userapi.models.UserProfile> {
      public getUserProfile() {
        super("getUserProfile");
      }

      public getUserProfile_args getEmptyArgsInstance() {
        return new getUserProfile_args();
      }

      public AsyncMethodCallback<org.apache.airavata.userapi.models.UserProfile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.userapi.models.UserProfile>() { 
          public void onComplete(org.apache.airavata.userapi.models.UserProfile o) {
            getUserProfile_result result = new getUserProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserProfile_result result = new getUserProfile_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserProfile_args args, AsyncMethodCallback<org.apache.airavata.userapi.models.UserProfile> resultHandler) throws TException {
        iface.getUserProfile(args.userName, args.token,resultHandler);
      }
    }

    public static class removeUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeUser_args, Void> {
      public removeUser() {
        super("removeUser");
      }

      public removeUser_args getEmptyArgsInstance() {
        return new removeUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeUser_result result = new removeUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeUser_result result = new removeUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeUser_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeUser(args.userName, args.token,resultHandler);
      }
    }

    public static class updateUserPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserPassword_args, Void> {
      public updateUserPassword() {
        super("updateUserPassword");
      }

      public updateUserPassword_args getEmptyArgsInstance() {
        return new updateUserPassword_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateUserPassword_result result = new updateUserPassword_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserPassword_result result = new updateUserPassword_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserPassword_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateUserPassword(args.userName, args.newPassword, args.oldPassword, args.token,resultHandler);
      }
    }

    public static class authenticateUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authenticateUser_args, org.apache.airavata.userapi.models.APIPermissions> {
      public authenticateUser() {
        super("authenticateUser");
      }

      public authenticateUser_args getEmptyArgsInstance() {
        return new authenticateUser_args();
      }

      public AsyncMethodCallback<org.apache.airavata.userapi.models.APIPermissions> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.userapi.models.APIPermissions>() { 
          public void onComplete(org.apache.airavata.userapi.models.APIPermissions o) {
            authenticateUser_result result = new authenticateUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authenticateUser_result result = new authenticateUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthenticationException) {
                        result.ate = (org.apache.airavata.userapi.error.AuthenticationException) e;
                        result.setAteIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authenticateUser_args args, AsyncMethodCallback<org.apache.airavata.userapi.models.APIPermissions> resultHandler) throws TException {
        iface.authenticateUser(args.userName, args.password, args.token,resultHandler);
      }
    }

    public static class addUserToRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addUserToRole_args, Void> {
      public addUserToRole() {
        super("addUserToRole");
      }

      public addUserToRole_args getEmptyArgsInstance() {
        return new addUserToRole_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addUserToRole_result result = new addUserToRole_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addUserToRole_result result = new addUserToRole_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addUserToRole_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addUserToRole(args.userName, args.roleName, args.token,resultHandler);
      }
    }

    public static class removeUserFromRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeUserFromRole_args, Void> {
      public removeUserFromRole() {
        super("removeUserFromRole");
      }

      public removeUserFromRole_args getEmptyArgsInstance() {
        return new removeUserFromRole_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeUserFromRole_result result = new removeUserFromRole_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeUserFromRole_result result = new removeUserFromRole_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeUserFromRole_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeUserFromRole(args.userName, args.roleName, args.token,resultHandler);
      }
    }

    public static class getUserListOfRole<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserListOfRole_args, List<String>> {
      public getUserListOfRole() {
        super("getUserListOfRole");
      }

      public getUserListOfRole_args getEmptyArgsInstance() {
        return new getUserListOfRole_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getUserListOfRole_result result = new getUserListOfRole_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserListOfRole_result result = new getUserListOfRole_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserListOfRole_args args, AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getUserListOfRole(args.roleName, args.token,resultHandler);
      }
    }

    public static class getRoleListOfUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoleListOfUser_args, List<String>> {
      public getRoleListOfUser() {
        super("getRoleListOfUser");
      }

      public getRoleListOfUser_args getEmptyArgsInstance() {
        return new getRoleListOfUser_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getRoleListOfUser_result result = new getRoleListOfUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRoleListOfUser_result result = new getRoleListOfUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoleListOfUser_args args, AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getRoleListOfUser(args.username, args.token,resultHandler);
      }
    }

    public static class getAllRoleNames<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllRoleNames_args, List<String>> {
      public getAllRoleNames() {
        super("getAllRoleNames");
      }

      public getAllRoleNames_args getEmptyArgsInstance() {
        return new getAllRoleNames_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getAllRoleNames_result result = new getAllRoleNames_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllRoleNames_result result = new getAllRoleNames_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllRoleNames_args args, AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getAllRoleNames(args.token,resultHandler);
      }
    }

    public static class getUserPermissions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserPermissions_args, org.apache.airavata.userapi.models.APIPermissions> {
      public getUserPermissions() {
        super("getUserPermissions");
      }

      public getUserPermissions_args getEmptyArgsInstance() {
        return new getUserPermissions_args();
      }

      public AsyncMethodCallback<org.apache.airavata.userapi.models.APIPermissions> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.airavata.userapi.models.APIPermissions>() { 
          public void onComplete(org.apache.airavata.userapi.models.APIPermissions o) {
            getUserPermissions_result result = new getUserPermissions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserPermissions_result result = new getUserPermissions_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserPermissions_args args, AsyncMethodCallback<org.apache.airavata.userapi.models.APIPermissions> resultHandler) throws TException {
        iface.getUserPermissions(args.username, args.token,resultHandler);
      }
    }

    public static class checkPermission<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkPermission_args, Boolean> {
      public checkPermission() {
        super("checkPermission");
      }

      public checkPermission_args getEmptyArgsInstance() {
        return new checkPermission_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkPermission_result result = new checkPermission_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkPermission_result result = new checkPermission_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkPermission_args args, AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkPermission(args.username, args.permissionString, args.token,resultHandler);
      }
    }

  }

  public static class getAPIVersion_args implements org.apache.thrift.TBase<getAPIVersion_args, getAPIVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAPIVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAPIVersion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAPIVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAPIVersion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAPIVersion_args.class, metaDataMap);
    }

    public getAPIVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAPIVersion_args(getAPIVersion_args other) {
    }

    public getAPIVersion_args deepCopy() {
      return new getAPIVersion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAPIVersion_args)
        return this.equals((getAPIVersion_args)that);
      return false;
    }

    public boolean equals(getAPIVersion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getAPIVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAPIVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAPIVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getAPIVersion_argsStandardScheme getScheme() {
        return new getAPIVersion_argsStandardScheme();
      }
    }

    private static class getAPIVersion_argsStandardScheme extends StandardScheme<getAPIVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAPIVersion_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAPIVersion_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAPIVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getAPIVersion_argsTupleScheme getScheme() {
        return new getAPIVersion_argsTupleScheme();
      }
    }

    private static class getAPIVersion_argsTupleScheme extends TupleScheme<getAPIVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAPIVersion_result implements org.apache.thrift.TBase<getAPIVersion_result, getAPIVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAPIVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAPIVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAPIVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAPIVersion_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ASE((short)2, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAPIVersion_result.class, metaDataMap);
    }

    public getAPIVersion_result() {
    }

    public getAPIVersion_result(
      String success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAPIVersion_result(getAPIVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public getAPIVersion_result deepCopy() {
      return new getAPIVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getAPIVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAPIVersion_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public getAPIVersion_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAPIVersion_result)
        return this.equals((getAPIVersion_result)that);
      return false;
    }

    public boolean equals(getAPIVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAPIVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAPIVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAPIVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getAPIVersion_resultStandardScheme getScheme() {
        return new getAPIVersion_resultStandardScheme();
      }
    }

    private static class getAPIVersion_resultStandardScheme extends StandardScheme<getAPIVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAPIVersion_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAPIVersion_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAPIVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getAPIVersion_resultTupleScheme getScheme() {
        return new getAPIVersion_resultTupleScheme();
      }
    }

    private static class getAPIVersion_resultTupleScheme extends TupleScheme<getAPIVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class authenticateGateway_args implements org.apache.thrift.TBase<authenticateGateway_args, authenticateGateway_args._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateGateway_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateGateway_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateGateway_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateGateway_argsTupleSchemeFactory());
    }

    public String username; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateGateway_args.class, metaDataMap);
    }

    public authenticateGateway_args() {
    }

    public authenticateGateway_args(
      String username,
      String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateGateway_args(authenticateGateway_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public authenticateGateway_args deepCopy() {
      return new authenticateGateway_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public String getUsername() {
      return this.username;
    }

    public authenticateGateway_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public authenticateGateway_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateGateway_args)
        return this.equals((authenticateGateway_args)that);
      return false;
    }

    public boolean equals(authenticateGateway_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(authenticateGateway_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateGateway_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (username == null) {
        throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateGateway_argsStandardSchemeFactory implements SchemeFactory {
      public authenticateGateway_argsStandardScheme getScheme() {
        return new authenticateGateway_argsStandardScheme();
      }
    }

    private static class authenticateGateway_argsStandardScheme extends StandardScheme<authenticateGateway_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateGateway_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateGateway_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateGateway_argsTupleSchemeFactory implements SchemeFactory {
      public authenticateGateway_argsTupleScheme getScheme() {
        return new authenticateGateway_argsTupleScheme();
      }
    }

    private static class authenticateGateway_argsTupleScheme extends TupleScheme<authenticateGateway_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateGateway_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.username);
        oprot.writeString(struct.password);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateGateway_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
    }

  }

  public static class authenticateGateway_result implements org.apache.thrift.TBase<authenticateGateway_result, authenticateGateway_result._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateGateway_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateGateway_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateGateway_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateGateway_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.models.AuthenticationResponse success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required
    public org.apache.airavata.userapi.error.AuthenticationException are; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ASE((short)2, "ase"),
      ARE((short)3, "are");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ASE
            return ASE;
          case 3: // ARE
            return ARE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.userapi.models.AuthenticationResponse.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateGateway_result.class, metaDataMap);
    }

    public authenticateGateway_result() {
    }

    public authenticateGateway_result(
      org.apache.airavata.userapi.models.AuthenticationResponse success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.UserAPISystemException ase,
      org.apache.airavata.userapi.error.AuthenticationException are)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ase = ase;
      this.are = are;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateGateway_result(authenticateGateway_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.userapi.models.AuthenticationResponse(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthenticationException(other.are);
      }
    }

    public authenticateGateway_result deepCopy() {
      return new authenticateGateway_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ase = null;
      this.are = null;
    }

    public org.apache.airavata.userapi.models.AuthenticationResponse getSuccess() {
      return this.success;
    }

    public authenticateGateway_result setSuccess(org.apache.airavata.userapi.models.AuthenticationResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public authenticateGateway_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public authenticateGateway_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthenticationException getAre() {
      return this.are;
    }

    public authenticateGateway_result setAre(org.apache.airavata.userapi.error.AuthenticationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.userapi.models.AuthenticationResponse)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthenticationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ASE:
        return getAse();

      case ARE:
        return getAre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ASE:
        return isSetAse();
      case ARE:
        return isSetAre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateGateway_result)
        return this.equals((authenticateGateway_result)that);
      return false;
    }

    public boolean equals(authenticateGateway_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      return list.hashCode();
    }

    @Override
    public int compareTo(authenticateGateway_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateGateway_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateGateway_resultStandardSchemeFactory implements SchemeFactory {
      public authenticateGateway_resultStandardScheme getScheme() {
        return new authenticateGateway_resultStandardScheme();
      }
    }

    private static class authenticateGateway_resultStandardScheme extends StandardScheme<authenticateGateway_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateGateway_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.userapi.models.AuthenticationResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthenticationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateGateway_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateGateway_resultTupleSchemeFactory implements SchemeFactory {
      public authenticateGateway_resultTupleScheme getScheme() {
        return new authenticateGateway_resultTupleScheme();
      }
    }

    private static class authenticateGateway_resultTupleScheme extends TupleScheme<authenticateGateway_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateGateway_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        if (struct.isSetAre()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateGateway_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.userapi.models.AuthenticationResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.are = new org.apache.airavata.userapi.error.AuthenticationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
      }
    }

  }

  public static class checkUsernameExists_args implements org.apache.thrift.TBase<checkUsernameExists_args, checkUsernameExists_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkUsernameExists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUsernameExists_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUsernameExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUsernameExists_argsTupleSchemeFactory());
    }

    public String username; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUsernameExists_args.class, metaDataMap);
    }

    public checkUsernameExists_args() {
    }

    public checkUsernameExists_args(
      String username,
      String token)
    {
      this();
      this.username = username;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUsernameExists_args(checkUsernameExists_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public checkUsernameExists_args deepCopy() {
      return new checkUsernameExists_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.token = null;
    }

    public String getUsername() {
      return this.username;
    }

    public checkUsernameExists_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public checkUsernameExists_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUsernameExists_args)
        return this.equals((checkUsernameExists_args)that);
      return false;
    }

    public boolean equals(checkUsernameExists_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkUsernameExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUsernameExists_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (username == null) {
        throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUsernameExists_argsStandardSchemeFactory implements SchemeFactory {
      public checkUsernameExists_argsStandardScheme getScheme() {
        return new checkUsernameExists_argsStandardScheme();
      }
    }

    private static class checkUsernameExists_argsStandardScheme extends StandardScheme<checkUsernameExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUsernameExists_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUsernameExists_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUsernameExists_argsTupleSchemeFactory implements SchemeFactory {
      public checkUsernameExists_argsTupleScheme getScheme() {
        return new checkUsernameExists_argsTupleScheme();
      }
    }

    private static class checkUsernameExists_argsTupleScheme extends TupleScheme<checkUsernameExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUsernameExists_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.username);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUsernameExists_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class checkUsernameExists_result implements org.apache.thrift.TBase<checkUsernameExists_result, checkUsernameExists_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkUsernameExists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUsernameExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUsernameExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUsernameExists_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUsernameExists_result.class, metaDataMap);
    }

    public checkUsernameExists_result() {
    }

    public checkUsernameExists_result(
      boolean success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUsernameExists_result(checkUsernameExists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public checkUsernameExists_result deepCopy() {
      return new checkUsernameExists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkUsernameExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public checkUsernameExists_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public checkUsernameExists_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public checkUsernameExists_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUsernameExists_result)
        return this.equals((checkUsernameExists_result)that);
      return false;
    }

    public boolean equals(checkUsernameExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkUsernameExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUsernameExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUsernameExists_resultStandardSchemeFactory implements SchemeFactory {
      public checkUsernameExists_resultStandardScheme getScheme() {
        return new checkUsernameExists_resultStandardScheme();
      }
    }

    private static class checkUsernameExists_resultStandardScheme extends StandardScheme<checkUsernameExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUsernameExists_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUsernameExists_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUsernameExists_resultTupleSchemeFactory implements SchemeFactory {
      public checkUsernameExists_resultTupleScheme getScheme() {
        return new checkUsernameExists_resultTupleScheme();
      }
    }

    private static class checkUsernameExists_resultTupleScheme extends TupleScheme<checkUsernameExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUsernameExists_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUsernameExists_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class createNewUser_args implements org.apache.thrift.TBase<createNewUser_args, createNewUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createNewUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfile", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewUser_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String password; // required
    public org.apache.airavata.userapi.models.UserProfile userProfile; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      PASSWORD((short)2, "password"),
      USER_PROFILE((short)3, "userProfile"),
      TOKEN((short)4, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // USER_PROFILE
            return USER_PROFILE;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("userProfile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.userapi.models.UserProfile.class)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewUser_args.class, metaDataMap);
    }

    public createNewUser_args() {
    }

    public createNewUser_args(
      String userName,
      String password,
      org.apache.airavata.userapi.models.UserProfile userProfile,
      String token)
    {
      this();
      this.userName = userName;
      this.password = password;
      this.userProfile = userProfile;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewUser_args(createNewUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetUserProfile()) {
        this.userProfile = new org.apache.airavata.userapi.models.UserProfile(other.userProfile);
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public createNewUser_args deepCopy() {
      return new createNewUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.password = null;
      this.userProfile = null;
      this.token = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public createNewUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public createNewUser_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public org.apache.airavata.userapi.models.UserProfile getUserProfile() {
      return this.userProfile;
    }

    public createNewUser_args setUserProfile(org.apache.airavata.userapi.models.UserProfile userProfile) {
      this.userProfile = userProfile;
      return this;
    }

    public void unsetUserProfile() {
      this.userProfile = null;
    }

    /** Returns true if field userProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfile() {
      return this.userProfile != null;
    }

    public void setUserProfileIsSet(boolean value) {
      if (!value) {
        this.userProfile = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public createNewUser_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case USER_PROFILE:
        if (value == null) {
          unsetUserProfile();
        } else {
          setUserProfile((org.apache.airavata.userapi.models.UserProfile)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case PASSWORD:
        return getPassword();

      case USER_PROFILE:
        return getUserProfile();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case PASSWORD:
        return isSetPassword();
      case USER_PROFILE:
        return isSetUserProfile();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewUser_args)
        return this.equals((createNewUser_args)that);
      return false;
    }

    public boolean equals(createNewUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_userProfile = true && this.isSetUserProfile();
      boolean that_present_userProfile = true && that.isSetUserProfile();
      if (this_present_userProfile || that_present_userProfile) {
        if (!(this_present_userProfile && that_present_userProfile))
          return false;
        if (!this.userProfile.equals(that.userProfile))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      boolean present_userProfile = true && (isSetUserProfile());
      list.add(present_userProfile);
      if (present_userProfile)
        list.add(userProfile);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserProfile()).compareTo(other.isSetUserProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfile, other.userProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userProfile:");
      if (this.userProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.userProfile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (userName == null) {
        throw new TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      if (userProfile == null) {
        throw new TProtocolException("Required field 'userProfile' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (userProfile != null) {
        userProfile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewUser_argsStandardSchemeFactory implements SchemeFactory {
      public createNewUser_argsStandardScheme getScheme() {
        return new createNewUser_argsStandardScheme();
      }
    }

    private static class createNewUser_argsStandardScheme extends StandardScheme<createNewUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewUser_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userProfile = new org.apache.airavata.userapi.models.UserProfile();
                struct.userProfile.read(iprot);
                struct.setUserProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewUser_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.userProfile != null) {
          oprot.writeFieldBegin(USER_PROFILE_FIELD_DESC);
          struct.userProfile.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewUser_argsTupleSchemeFactory implements SchemeFactory {
      public createNewUser_argsTupleScheme getScheme() {
        return new createNewUser_argsTupleScheme();
      }
    }

    private static class createNewUser_argsTupleScheme extends TupleScheme<createNewUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewUser_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.password);
        struct.userProfile.write(oprot);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewUser_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
        struct.userProfile = new org.apache.airavata.userapi.models.UserProfile();
        struct.userProfile.read(iprot);
        struct.setUserProfileIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class createNewUser_result implements org.apache.thrift.TBase<createNewUser_result, createNewUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<createNewUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewUser_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewUser_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewUser_result.class, metaDataMap);
    }

    public createNewUser_result() {
    }

    public createNewUser_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewUser_result(createNewUser_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public createNewUser_result deepCopy() {
      return new createNewUser_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public createNewUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public createNewUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public createNewUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewUser_result)
        return this.equals((createNewUser_result)that);
      return false;
    }

    public boolean equals(createNewUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewUser_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewUser_resultStandardSchemeFactory implements SchemeFactory {
      public createNewUser_resultStandardScheme getScheme() {
        return new createNewUser_resultStandardScheme();
      }
    }

    private static class createNewUser_resultStandardScheme extends StandardScheme<createNewUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewUser_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewUser_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewUser_resultTupleSchemeFactory implements SchemeFactory {
      public createNewUser_resultTupleScheme getScheme() {
        return new createNewUser_resultTupleScheme();
      }
    }

    private static class createNewUser_resultTupleScheme extends TupleScheme<createNewUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewUser_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewUser_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateUserProfile_args implements org.apache.thrift.TBase<updateUserProfile_args, updateUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserProfile_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("userProfile", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserProfile_argsTupleSchemeFactory());
    }

    public String userName; // required
    public org.apache.airavata.userapi.models.UserProfile userProfile; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      USER_PROFILE((short)2, "userProfile"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // USER_PROFILE
            return USER_PROFILE;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("userProfile", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.userapi.models.UserProfile.class)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserProfile_args.class, metaDataMap);
    }

    public updateUserProfile_args() {
    }

    public updateUserProfile_args(
      String userName,
      org.apache.airavata.userapi.models.UserProfile userProfile,
      String token)
    {
      this();
      this.userName = userName;
      this.userProfile = userProfile;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserProfile_args(updateUserProfile_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetUserProfile()) {
        this.userProfile = new org.apache.airavata.userapi.models.UserProfile(other.userProfile);
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public updateUserProfile_args deepCopy() {
      return new updateUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.userProfile = null;
      this.token = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public updateUserProfile_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public org.apache.airavata.userapi.models.UserProfile getUserProfile() {
      return this.userProfile;
    }

    public updateUserProfile_args setUserProfile(org.apache.airavata.userapi.models.UserProfile userProfile) {
      this.userProfile = userProfile;
      return this;
    }

    public void unsetUserProfile() {
      this.userProfile = null;
    }

    /** Returns true if field userProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetUserProfile() {
      return this.userProfile != null;
    }

    public void setUserProfileIsSet(boolean value) {
      if (!value) {
        this.userProfile = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public updateUserProfile_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case USER_PROFILE:
        if (value == null) {
          unsetUserProfile();
        } else {
          setUserProfile((org.apache.airavata.userapi.models.UserProfile)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case USER_PROFILE:
        return getUserProfile();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case USER_PROFILE:
        return isSetUserProfile();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserProfile_args)
        return this.equals((updateUserProfile_args)that);
      return false;
    }

    public boolean equals(updateUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_userProfile = true && this.isSetUserProfile();
      boolean that_present_userProfile = true && that.isSetUserProfile();
      if (this_present_userProfile || that_present_userProfile) {
        if (!(this_present_userProfile && that_present_userProfile))
          return false;
        if (!this.userProfile.equals(that.userProfile))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_userProfile = true && (isSetUserProfile());
      list.add(present_userProfile);
      if (present_userProfile)
        list.add(userProfile);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserProfile()).compareTo(other.isSetUserProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userProfile, other.userProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserProfile_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userProfile:");
      if (this.userProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.userProfile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (userName == null) {
        throw new TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (userProfile == null) {
        throw new TProtocolException("Required field 'userProfile' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (userProfile != null) {
        userProfile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserProfile_argsStandardScheme getScheme() {
        return new updateUserProfile_argsStandardScheme();
      }
    }

    private static class updateUserProfile_argsStandardScheme extends StandardScheme<updateUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserProfile_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.userProfile = new org.apache.airavata.userapi.models.UserProfile();
                struct.userProfile.read(iprot);
                struct.setUserProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserProfile_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.userProfile != null) {
          oprot.writeFieldBegin(USER_PROFILE_FIELD_DESC);
          struct.userProfile.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserProfile_argsTupleScheme getScheme() {
        return new updateUserProfile_argsTupleScheme();
      }
    }

    private static class updateUserProfile_argsTupleScheme extends TupleScheme<updateUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        struct.userProfile.write(oprot);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.userProfile = new org.apache.airavata.userapi.models.UserProfile();
        struct.userProfile.read(iprot);
        struct.setUserProfileIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class updateUserProfile_result implements org.apache.thrift.TBase<updateUserProfile_result, updateUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserProfile_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserProfile_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserProfile_result.class, metaDataMap);
    }

    public updateUserProfile_result() {
    }

    public updateUserProfile_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserProfile_result(updateUserProfile_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public updateUserProfile_result deepCopy() {
      return new updateUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateUserProfile_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public updateUserProfile_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public updateUserProfile_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserProfile_result)
        return this.equals((updateUserProfile_result)that);
      return false;
    }

    public boolean equals(updateUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserProfile_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserProfile_resultStandardScheme getScheme() {
        return new updateUserProfile_resultStandardScheme();
      }
    }

    private static class updateUserProfile_resultStandardScheme extends StandardScheme<updateUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserProfile_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserProfile_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserProfile_resultTupleScheme getScheme() {
        return new updateUserProfile_resultTupleScheme();
      }
    }

    private static class updateUserProfile_resultTupleScheme extends TupleScheme<updateUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserProfile_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getUserProfile_args implements org.apache.thrift.TBase<getUserProfile_args, getUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfile_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfile_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_args.class, metaDataMap);
    }

    public getUserProfile_args() {
    }

    public getUserProfile_args(
      String userName,
      String token)
    {
      this();
      this.userName = userName;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfile_args(getUserProfile_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getUserProfile_args deepCopy() {
      return new getUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.token = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public getUserProfile_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public getUserProfile_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfile_args)
        return this.equals((getUserProfile_args)that);
      return false;
    }

    public boolean equals(getUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfile_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (userName == null) {
        throw new TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getUserProfile_argsStandardScheme getScheme() {
        return new getUserProfile_argsStandardScheme();
      }
    }

    private static class getUserProfile_argsStandardScheme extends StandardScheme<getUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getUserProfile_argsTupleScheme getScheme() {
        return new getUserProfile_argsTupleScheme();
      }
    }

    private static class getUserProfile_argsTupleScheme extends TupleScheme<getUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class getUserProfile_result implements org.apache.thrift.TBase<getUserProfile_result, getUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfile_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.models.UserProfile success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.userapi.models.UserProfile.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_result.class, metaDataMap);
    }

    public getUserProfile_result() {
    }

    public getUserProfile_result(
      org.apache.airavata.userapi.models.UserProfile success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfile_result(getUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.userapi.models.UserProfile(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public getUserProfile_result deepCopy() {
      return new getUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.models.UserProfile getSuccess() {
      return this.success;
    }

    public getUserProfile_result setSuccess(org.apache.airavata.userapi.models.UserProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getUserProfile_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public getUserProfile_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public getUserProfile_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.userapi.models.UserProfile)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfile_result)
        return this.equals((getUserProfile_result)that);
      return false;
    }

    public boolean equals(getUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getUserProfile_resultStandardScheme getScheme() {
        return new getUserProfile_resultStandardScheme();
      }
    }

    private static class getUserProfile_resultStandardScheme extends StandardScheme<getUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.userapi.models.UserProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getUserProfile_resultTupleScheme getScheme() {
        return new getUserProfile_resultTupleScheme();
      }
    }

    private static class getUserProfile_resultTupleScheme extends TupleScheme<getUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.userapi.models.UserProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class removeUser_args implements org.apache.thrift.TBase<removeUser_args, removeUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUser_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUser_args.class, metaDataMap);
    }

    public removeUser_args() {
    }

    public removeUser_args(
      String userName,
      String token)
    {
      this();
      this.userName = userName;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUser_args(removeUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public removeUser_args deepCopy() {
      return new removeUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.token = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public removeUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public removeUser_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUser_args)
        return this.equals((removeUser_args)that);
      return false;
    }

    public boolean equals(removeUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (userName == null) {
        throw new TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUser_argsStandardSchemeFactory implements SchemeFactory {
      public removeUser_argsStandardScheme getScheme() {
        return new removeUser_argsStandardScheme();
      }
    }

    private static class removeUser_argsStandardScheme extends StandardScheme<removeUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUser_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUser_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUser_argsTupleSchemeFactory implements SchemeFactory {
      public removeUser_argsTupleScheme getScheme() {
        return new removeUser_argsTupleScheme();
      }
    }

    private static class removeUser_argsTupleScheme extends TupleScheme<removeUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUser_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUser_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class removeUser_result implements org.apache.thrift.TBase<removeUser_result, removeUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUser_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUser_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUser_result.class, metaDataMap);
    }

    public removeUser_result() {
    }

    public removeUser_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUser_result(removeUser_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public removeUser_result deepCopy() {
      return new removeUser_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public removeUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public removeUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public removeUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUser_result)
        return this.equals((removeUser_result)that);
      return false;
    }

    public boolean equals(removeUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUser_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUser_resultStandardSchemeFactory implements SchemeFactory {
      public removeUser_resultStandardScheme getScheme() {
        return new removeUser_resultStandardScheme();
      }
    }

    private static class removeUser_resultStandardScheme extends StandardScheme<removeUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUser_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUser_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUser_resultTupleSchemeFactory implements SchemeFactory {
      public removeUser_resultTupleScheme getScheme() {
        return new removeUser_resultTupleScheme();
      }
    }

    private static class removeUser_resultTupleScheme extends TupleScheme<removeUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUser_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUser_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateUserPassword_args implements org.apache.thrift.TBase<updateUserPassword_args, updateUserPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserPassword_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPassword", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OLD_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPassword", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserPassword_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String newPassword; // required
    public String oldPassword; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      NEW_PASSWORD((short)2, "newPassword"),
      OLD_PASSWORD((short)3, "oldPassword"),
      TOKEN((short)4, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // NEW_PASSWORD
            return NEW_PASSWORD;
          case 3: // OLD_PASSWORD
            return OLD_PASSWORD;
          case 4: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("newPassword", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OLD_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("oldPassword", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserPassword_args.class, metaDataMap);
    }

    public updateUserPassword_args() {
    }

    public updateUserPassword_args(
      String userName,
      String newPassword,
      String oldPassword,
      String token)
    {
      this();
      this.userName = userName;
      this.newPassword = newPassword;
      this.oldPassword = oldPassword;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserPassword_args(updateUserPassword_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetNewPassword()) {
        this.newPassword = other.newPassword;
      }
      if (other.isSetOldPassword()) {
        this.oldPassword = other.oldPassword;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public updateUserPassword_args deepCopy() {
      return new updateUserPassword_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.newPassword = null;
      this.oldPassword = null;
      this.token = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public updateUserPassword_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getNewPassword() {
      return this.newPassword;
    }

    public updateUserPassword_args setNewPassword(String newPassword) {
      this.newPassword = newPassword;
      return this;
    }

    public void unsetNewPassword() {
      this.newPassword = null;
    }

    /** Returns true if field newPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPassword() {
      return this.newPassword != null;
    }

    public void setNewPasswordIsSet(boolean value) {
      if (!value) {
        this.newPassword = null;
      }
    }

    public String getOldPassword() {
      return this.oldPassword;
    }

    public updateUserPassword_args setOldPassword(String oldPassword) {
      this.oldPassword = oldPassword;
      return this;
    }

    public void unsetOldPassword() {
      this.oldPassword = null;
    }

    /** Returns true if field oldPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetOldPassword() {
      return this.oldPassword != null;
    }

    public void setOldPasswordIsSet(boolean value) {
      if (!value) {
        this.oldPassword = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public updateUserPassword_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case NEW_PASSWORD:
        if (value == null) {
          unsetNewPassword();
        } else {
          setNewPassword((String)value);
        }
        break;

      case OLD_PASSWORD:
        if (value == null) {
          unsetOldPassword();
        } else {
          setOldPassword((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case NEW_PASSWORD:
        return getNewPassword();

      case OLD_PASSWORD:
        return getOldPassword();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case NEW_PASSWORD:
        return isSetNewPassword();
      case OLD_PASSWORD:
        return isSetOldPassword();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserPassword_args)
        return this.equals((updateUserPassword_args)that);
      return false;
    }

    public boolean equals(updateUserPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_newPassword = true && this.isSetNewPassword();
      boolean that_present_newPassword = true && that.isSetNewPassword();
      if (this_present_newPassword || that_present_newPassword) {
        if (!(this_present_newPassword && that_present_newPassword))
          return false;
        if (!this.newPassword.equals(that.newPassword))
          return false;
      }

      boolean this_present_oldPassword = true && this.isSetOldPassword();
      boolean that_present_oldPassword = true && that.isSetOldPassword();
      if (this_present_oldPassword || that_present_oldPassword) {
        if (!(this_present_oldPassword && that_present_oldPassword))
          return false;
        if (!this.oldPassword.equals(that.oldPassword))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_newPassword = true && (isSetNewPassword());
      list.add(present_newPassword);
      if (present_newPassword)
        list.add(newPassword);

      boolean present_oldPassword = true && (isSetOldPassword());
      list.add(present_oldPassword);
      if (present_oldPassword)
        list.add(oldPassword);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPassword()).compareTo(other.isSetNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPassword, other.newPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldPassword()).compareTo(other.isSetOldPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPassword, other.oldPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserPassword_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPassword:");
      if (this.newPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.newPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldPassword:");
      if (this.oldPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.oldPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (userName == null) {
        throw new TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (newPassword == null) {
        throw new TProtocolException("Required field 'newPassword' was not present! Struct: " + toString());
      }
      if (oldPassword == null) {
        throw new TProtocolException("Required field 'oldPassword' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserPassword_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserPassword_argsStandardScheme getScheme() {
        return new updateUserPassword_argsStandardScheme();
      }
    }

    private static class updateUserPassword_argsStandardScheme extends StandardScheme<updateUserPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserPassword_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newPassword = iprot.readString();
                struct.setNewPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OLD_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oldPassword = iprot.readString();
                struct.setOldPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserPassword_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.newPassword != null) {
          oprot.writeFieldBegin(NEW_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.newPassword);
          oprot.writeFieldEnd();
        }
        if (struct.oldPassword != null) {
          oprot.writeFieldBegin(OLD_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.oldPassword);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserPassword_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserPassword_argsTupleScheme getScheme() {
        return new updateUserPassword_argsTupleScheme();
      }
    }

    private static class updateUserPassword_argsTupleScheme extends TupleScheme<updateUserPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserPassword_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.newPassword);
        oprot.writeString(struct.oldPassword);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserPassword_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.newPassword = iprot.readString();
        struct.setNewPasswordIsSet(true);
        struct.oldPassword = iprot.readString();
        struct.setOldPasswordIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class updateUserPassword_result implements org.apache.thrift.TBase<updateUserPassword_result, updateUserPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserPassword_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserPassword_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserPassword_result.class, metaDataMap);
    }

    public updateUserPassword_result() {
    }

    public updateUserPassword_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserPassword_result(updateUserPassword_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public updateUserPassword_result deepCopy() {
      return new updateUserPassword_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateUserPassword_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public updateUserPassword_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public updateUserPassword_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserPassword_result)
        return this.equals((updateUserPassword_result)that);
      return false;
    }

    public boolean equals(updateUserPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserPassword_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserPassword_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserPassword_resultStandardScheme getScheme() {
        return new updateUserPassword_resultStandardScheme();
      }
    }

    private static class updateUserPassword_resultStandardScheme extends StandardScheme<updateUserPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserPassword_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserPassword_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserPassword_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserPassword_resultTupleScheme getScheme() {
        return new updateUserPassword_resultTupleScheme();
      }
    }

    private static class updateUserPassword_resultTupleScheme extends TupleScheme<updateUserPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserPassword_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserPassword_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class authenticateUser_args implements org.apache.thrift.TBase<authenticateUser_args, authenticateUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateUser_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String password; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      PASSWORD((short)2, "password"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // PASSWORD
            return PASSWORD;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateUser_args.class, metaDataMap);
    }

    public authenticateUser_args() {
    }

    public authenticateUser_args(
      String userName,
      String password,
      String token)
    {
      this();
      this.userName = userName;
      this.password = password;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateUser_args(authenticateUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public authenticateUser_args deepCopy() {
      return new authenticateUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.password = null;
      this.token = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public authenticateUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public authenticateUser_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public authenticateUser_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case PASSWORD:
        return getPassword();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case PASSWORD:
        return isSetPassword();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateUser_args)
        return this.equals((authenticateUser_args)that);
      return false;
    }

    public boolean equals(authenticateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(authenticateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (userName == null) {
        throw new TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateUser_argsStandardSchemeFactory implements SchemeFactory {
      public authenticateUser_argsStandardScheme getScheme() {
        return new authenticateUser_argsStandardScheme();
      }
    }

    private static class authenticateUser_argsStandardScheme extends StandardScheme<authenticateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateUser_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateUser_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateUser_argsTupleSchemeFactory implements SchemeFactory {
      public authenticateUser_argsTupleScheme getScheme() {
        return new authenticateUser_argsTupleScheme();
      }
    }

    private static class authenticateUser_argsTupleScheme extends TupleScheme<authenticateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateUser_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.password);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateUser_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class authenticateUser_result implements org.apache.thrift.TBase<authenticateUser_result, authenticateUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ate", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateUser_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.models.APIPermissions success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required
    public org.apache.airavata.userapi.error.AuthenticationException ate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase"),
      ATE((short)4, "ate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          case 4: // ATE
            return ATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.userapi.models.APIPermissions.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ATE, new org.apache.thrift.meta_data.FieldMetaData("ate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateUser_result.class, metaDataMap);
    }

    public authenticateUser_result() {
    }

    public authenticateUser_result(
      org.apache.airavata.userapi.models.APIPermissions success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase,
      org.apache.airavata.userapi.error.AuthenticationException ate)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.are = are;
      this.ase = ase;
      this.ate = ate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateUser_result(authenticateUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.userapi.models.APIPermissions(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
      if (other.isSetAte()) {
        this.ate = new org.apache.airavata.userapi.error.AuthenticationException(other.ate);
      }
    }

    public authenticateUser_result deepCopy() {
      return new authenticateUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.are = null;
      this.ase = null;
      this.ate = null;
    }

    public org.apache.airavata.userapi.models.APIPermissions getSuccess() {
      return this.success;
    }

    public authenticateUser_result setSuccess(org.apache.airavata.userapi.models.APIPermissions success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public authenticateUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public authenticateUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public authenticateUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthenticationException getAte() {
      return this.ate;
    }

    public authenticateUser_result setAte(org.apache.airavata.userapi.error.AuthenticationException ate) {
      this.ate = ate;
      return this;
    }

    public void unsetAte() {
      this.ate = null;
    }

    /** Returns true if field ate is set (has been assigned a value) and false otherwise */
    public boolean isSetAte() {
      return this.ate != null;
    }

    public void setAteIsSet(boolean value) {
      if (!value) {
        this.ate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.userapi.models.APIPermissions)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      case ATE:
        if (value == null) {
          unsetAte();
        } else {
          setAte((org.apache.airavata.userapi.error.AuthenticationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      case ATE:
        return getAte();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      case ATE:
        return isSetAte();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateUser_result)
        return this.equals((authenticateUser_result)that);
      return false;
    }

    public boolean equals(authenticateUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      boolean this_present_ate = true && this.isSetAte();
      boolean that_present_ate = true && that.isSetAte();
      if (this_present_ate || that_present_ate) {
        if (!(this_present_ate && that_present_ate))
          return false;
        if (!this.ate.equals(that.ate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      boolean present_ate = true && (isSetAte());
      list.add(present_ate);
      if (present_ate)
        list.add(ate);

      return list.hashCode();
    }

    @Override
    public int compareTo(authenticateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAte()).compareTo(other.isSetAte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ate, other.ate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ate:");
      if (this.ate == null) {
        sb.append("null");
      } else {
        sb.append(this.ate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateUser_resultStandardSchemeFactory implements SchemeFactory {
      public authenticateUser_resultStandardScheme getScheme() {
        return new authenticateUser_resultStandardScheme();
      }
    }

    private static class authenticateUser_resultStandardScheme extends StandardScheme<authenticateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateUser_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.userapi.models.APIPermissions();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ate = new org.apache.airavata.userapi.error.AuthenticationException();
                struct.ate.read(iprot);
                struct.setAteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateUser_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ate != null) {
          oprot.writeFieldBegin(ATE_FIELD_DESC);
          struct.ate.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateUser_resultTupleSchemeFactory implements SchemeFactory {
      public authenticateUser_resultTupleScheme getScheme() {
        return new authenticateUser_resultTupleScheme();
      }
    }

    private static class authenticateUser_resultTupleScheme extends TupleScheme<authenticateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateUser_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        if (struct.isSetAte()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
        if (struct.isSetAte()) {
          struct.ate.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateUser_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.userapi.models.APIPermissions();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.ate = new org.apache.airavata.userapi.error.AuthenticationException();
          struct.ate.read(iprot);
          struct.setAteIsSet(true);
        }
      }
    }

  }

  public static class addUserToRole_args implements org.apache.thrift.TBase<addUserToRole_args, addUserToRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<addUserToRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserToRole_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roleName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserToRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserToRole_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String roleName; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      ROLE_NAME((short)2, "roleName"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ROLE_NAME
            return ROLE_NAME;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("roleName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserToRole_args.class, metaDataMap);
    }

    public addUserToRole_args() {
    }

    public addUserToRole_args(
      String userName,
      String roleName,
      String token)
    {
      this();
      this.userName = userName;
      this.roleName = roleName;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserToRole_args(addUserToRole_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public addUserToRole_args deepCopy() {
      return new addUserToRole_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.roleName = null;
      this.token = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public addUserToRole_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getRoleName() {
      return this.roleName;
    }

    public addUserToRole_args setRoleName(String roleName) {
      this.roleName = roleName;
      return this;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    /** Returns true if field roleName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public void setRoleNameIsSet(boolean value) {
      if (!value) {
        this.roleName = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public addUserToRole_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case ROLE_NAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case ROLE_NAME:
        return getRoleName();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case ROLE_NAME:
        return isSetRoleName();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserToRole_args)
        return this.equals((addUserToRole_args)that);
      return false;
    }

    public boolean equals(addUserToRole_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_roleName = true && (isSetRoleName());
      list.add(present_roleName);
      if (present_roleName)
        list.add(roleName);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(addUserToRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoleName()).compareTo(other.isSetRoleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleName, other.roleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserToRole_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (userName == null) {
        throw new TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (roleName == null) {
        throw new TProtocolException("Required field 'roleName' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserToRole_argsStandardSchemeFactory implements SchemeFactory {
      public addUserToRole_argsStandardScheme getScheme() {
        return new addUserToRole_argsStandardScheme();
      }
    }

    private static class addUserToRole_argsStandardScheme extends StandardScheme<addUserToRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserToRole_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleName = iprot.readString();
                struct.setRoleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserToRole_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.roleName != null) {
          oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
          oprot.writeString(struct.roleName);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserToRole_argsTupleSchemeFactory implements SchemeFactory {
      public addUserToRole_argsTupleScheme getScheme() {
        return new addUserToRole_argsTupleScheme();
      }
    }

    private static class addUserToRole_argsTupleScheme extends TupleScheme<addUserToRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserToRole_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.roleName);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserToRole_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.roleName = iprot.readString();
        struct.setRoleNameIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class addUserToRole_result implements org.apache.thrift.TBase<addUserToRole_result, addUserToRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<addUserToRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addUserToRole_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addUserToRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addUserToRole_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addUserToRole_result.class, metaDataMap);
    }

    public addUserToRole_result() {
    }

    public addUserToRole_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addUserToRole_result(addUserToRole_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public addUserToRole_result deepCopy() {
      return new addUserToRole_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public addUserToRole_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public addUserToRole_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public addUserToRole_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addUserToRole_result)
        return this.equals((addUserToRole_result)that);
      return false;
    }

    public boolean equals(addUserToRole_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(addUserToRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addUserToRole_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addUserToRole_resultStandardSchemeFactory implements SchemeFactory {
      public addUserToRole_resultStandardScheme getScheme() {
        return new addUserToRole_resultStandardScheme();
      }
    }

    private static class addUserToRole_resultStandardScheme extends StandardScheme<addUserToRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addUserToRole_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addUserToRole_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addUserToRole_resultTupleSchemeFactory implements SchemeFactory {
      public addUserToRole_resultTupleScheme getScheme() {
        return new addUserToRole_resultTupleScheme();
      }
    }

    private static class addUserToRole_resultTupleScheme extends TupleScheme<addUserToRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addUserToRole_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addUserToRole_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class removeUserFromRole_args implements org.apache.thrift.TBase<removeUserFromRole_args, removeUserFromRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeUserFromRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUserFromRole_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ROLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roleName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUserFromRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUserFromRole_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String roleName; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      ROLE_NAME((short)2, "roleName"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // ROLE_NAME
            return ROLE_NAME;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("roleName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUserFromRole_args.class, metaDataMap);
    }

    public removeUserFromRole_args() {
    }

    public removeUserFromRole_args(
      String userName,
      String roleName,
      String token)
    {
      this();
      this.userName = userName;
      this.roleName = roleName;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUserFromRole_args(removeUserFromRole_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public removeUserFromRole_args deepCopy() {
      return new removeUserFromRole_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.roleName = null;
      this.token = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public removeUserFromRole_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getRoleName() {
      return this.roleName;
    }

    public removeUserFromRole_args setRoleName(String roleName) {
      this.roleName = roleName;
      return this;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    /** Returns true if field roleName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public void setRoleNameIsSet(boolean value) {
      if (!value) {
        this.roleName = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public removeUserFromRole_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case ROLE_NAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case ROLE_NAME:
        return getRoleName();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case ROLE_NAME:
        return isSetRoleName();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUserFromRole_args)
        return this.equals((removeUserFromRole_args)that);
      return false;
    }

    public boolean equals(removeUserFromRole_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_roleName = true && (isSetRoleName());
      list.add(present_roleName);
      if (present_roleName)
        list.add(roleName);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeUserFromRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoleName()).compareTo(other.isSetRoleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleName, other.roleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUserFromRole_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (userName == null) {
        throw new TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (roleName == null) {
        throw new TProtocolException("Required field 'roleName' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUserFromRole_argsStandardSchemeFactory implements SchemeFactory {
      public removeUserFromRole_argsStandardScheme getScheme() {
        return new removeUserFromRole_argsStandardScheme();
      }
    }

    private static class removeUserFromRole_argsStandardScheme extends StandardScheme<removeUserFromRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUserFromRole_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleName = iprot.readString();
                struct.setRoleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUserFromRole_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.roleName != null) {
          oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
          oprot.writeString(struct.roleName);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUserFromRole_argsTupleSchemeFactory implements SchemeFactory {
      public removeUserFromRole_argsTupleScheme getScheme() {
        return new removeUserFromRole_argsTupleScheme();
      }
    }

    private static class removeUserFromRole_argsTupleScheme extends TupleScheme<removeUserFromRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUserFromRole_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.roleName);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUserFromRole_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.roleName = iprot.readString();
        struct.setRoleNameIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class removeUserFromRole_result implements org.apache.thrift.TBase<removeUserFromRole_result, removeUserFromRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeUserFromRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUserFromRole_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUserFromRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUserFromRole_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUserFromRole_result.class, metaDataMap);
    }

    public removeUserFromRole_result() {
    }

    public removeUserFromRole_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUserFromRole_result(removeUserFromRole_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public removeUserFromRole_result deepCopy() {
      return new removeUserFromRole_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public removeUserFromRole_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public removeUserFromRole_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public removeUserFromRole_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUserFromRole_result)
        return this.equals((removeUserFromRole_result)that);
      return false;
    }

    public boolean equals(removeUserFromRole_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeUserFromRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUserFromRole_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUserFromRole_resultStandardSchemeFactory implements SchemeFactory {
      public removeUserFromRole_resultStandardScheme getScheme() {
        return new removeUserFromRole_resultStandardScheme();
      }
    }

    private static class removeUserFromRole_resultStandardScheme extends StandardScheme<removeUserFromRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUserFromRole_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUserFromRole_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUserFromRole_resultTupleSchemeFactory implements SchemeFactory {
      public removeUserFromRole_resultTupleScheme getScheme() {
        return new removeUserFromRole_resultTupleScheme();
      }
    }

    private static class removeUserFromRole_resultTupleScheme extends TupleScheme<removeUserFromRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUserFromRole_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUserFromRole_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getUserListOfRole_args implements org.apache.thrift.TBase<getUserListOfRole_args, getUserListOfRole_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserListOfRole_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserListOfRole_args");

    private static final org.apache.thrift.protocol.TField ROLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roleName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserListOfRole_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserListOfRole_argsTupleSchemeFactory());
    }

    public String roleName; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROLE_NAME((short)1, "roleName"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROLE_NAME
            return ROLE_NAME;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("roleName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserListOfRole_args.class, metaDataMap);
    }

    public getUserListOfRole_args() {
    }

    public getUserListOfRole_args(
      String roleName,
      String token)
    {
      this();
      this.roleName = roleName;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserListOfRole_args(getUserListOfRole_args other) {
      if (other.isSetRoleName()) {
        this.roleName = other.roleName;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getUserListOfRole_args deepCopy() {
      return new getUserListOfRole_args(this);
    }

    @Override
    public void clear() {
      this.roleName = null;
      this.token = null;
    }

    public String getRoleName() {
      return this.roleName;
    }

    public getUserListOfRole_args setRoleName(String roleName) {
      this.roleName = roleName;
      return this;
    }

    public void unsetRoleName() {
      this.roleName = null;
    }

    /** Returns true if field roleName is set (has been assigned a value) and false otherwise */
    public boolean isSetRoleName() {
      return this.roleName != null;
    }

    public void setRoleNameIsSet(boolean value) {
      if (!value) {
        this.roleName = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public getUserListOfRole_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROLE_NAME:
        if (value == null) {
          unsetRoleName();
        } else {
          setRoleName((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROLE_NAME:
        return getRoleName();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROLE_NAME:
        return isSetRoleName();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserListOfRole_args)
        return this.equals((getUserListOfRole_args)that);
      return false;
    }

    public boolean equals(getUserListOfRole_args that) {
      if (that == null)
        return false;

      boolean this_present_roleName = true && this.isSetRoleName();
      boolean that_present_roleName = true && that.isSetRoleName();
      if (this_present_roleName || that_present_roleName) {
        if (!(this_present_roleName && that_present_roleName))
          return false;
        if (!this.roleName.equals(that.roleName))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_roleName = true && (isSetRoleName());
      list.add(present_roleName);
      if (present_roleName)
        list.add(roleName);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserListOfRole_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoleName()).compareTo(other.isSetRoleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleName, other.roleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserListOfRole_args(");
      boolean first = true;

      sb.append("roleName:");
      if (this.roleName == null) {
        sb.append("null");
      } else {
        sb.append(this.roleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (roleName == null) {
        throw new TProtocolException("Required field 'roleName' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserListOfRole_argsStandardSchemeFactory implements SchemeFactory {
      public getUserListOfRole_argsStandardScheme getScheme() {
        return new getUserListOfRole_argsStandardScheme();
      }
    }

    private static class getUserListOfRole_argsStandardScheme extends StandardScheme<getUserListOfRole_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserListOfRole_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roleName = iprot.readString();
                struct.setRoleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserListOfRole_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roleName != null) {
          oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
          oprot.writeString(struct.roleName);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserListOfRole_argsTupleSchemeFactory implements SchemeFactory {
      public getUserListOfRole_argsTupleScheme getScheme() {
        return new getUserListOfRole_argsTupleScheme();
      }
    }

    private static class getUserListOfRole_argsTupleScheme extends TupleScheme<getUserListOfRole_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserListOfRole_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.roleName);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserListOfRole_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.roleName = iprot.readString();
        struct.setRoleNameIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class getUserListOfRole_result implements org.apache.thrift.TBase<getUserListOfRole_result, getUserListOfRole_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserListOfRole_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserListOfRole_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserListOfRole_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserListOfRole_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserListOfRole_result.class, metaDataMap);
    }

    public getUserListOfRole_result() {
    }

    public getUserListOfRole_result(
      List<String> success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserListOfRole_result(getUserListOfRole_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public getUserListOfRole_result deepCopy() {
      return new getUserListOfRole_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getUserListOfRole_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getUserListOfRole_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public getUserListOfRole_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public getUserListOfRole_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserListOfRole_result)
        return this.equals((getUserListOfRole_result)that);
      return false;
    }

    public boolean equals(getUserListOfRole_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserListOfRole_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserListOfRole_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserListOfRole_resultStandardSchemeFactory implements SchemeFactory {
      public getUserListOfRole_resultStandardScheme getScheme() {
        return new getUserListOfRole_resultStandardScheme();
      }
    }

    private static class getUserListOfRole_resultStandardScheme extends StandardScheme<getUserListOfRole_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserListOfRole_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2;
                    _elem2 = iprot.readString();
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserListOfRole_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserListOfRole_resultTupleSchemeFactory implements SchemeFactory {
      public getUserListOfRole_resultTupleScheme getScheme() {
        return new getUserListOfRole_resultTupleScheme();
      }
    }

    private static class getUserListOfRole_resultTupleScheme extends TupleScheme<getUserListOfRole_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserListOfRole_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserListOfRole_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7;
              _elem7 = iprot.readString();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getRoleListOfUser_args implements org.apache.thrift.TBase<getRoleListOfUser_args, getRoleListOfUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoleListOfUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoleListOfUser_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoleListOfUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoleListOfUser_argsTupleSchemeFactory());
    }

    public String username; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoleListOfUser_args.class, metaDataMap);
    }

    public getRoleListOfUser_args() {
    }

    public getRoleListOfUser_args(
      String username,
      String token)
    {
      this();
      this.username = username;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoleListOfUser_args(getRoleListOfUser_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getRoleListOfUser_args deepCopy() {
      return new getRoleListOfUser_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.token = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getRoleListOfUser_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public getRoleListOfUser_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoleListOfUser_args)
        return this.equals((getRoleListOfUser_args)that);
      return false;
    }

    public boolean equals(getRoleListOfUser_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRoleListOfUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoleListOfUser_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (username == null) {
        throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoleListOfUser_argsStandardSchemeFactory implements SchemeFactory {
      public getRoleListOfUser_argsStandardScheme getScheme() {
        return new getRoleListOfUser_argsStandardScheme();
      }
    }

    private static class getRoleListOfUser_argsStandardScheme extends StandardScheme<getRoleListOfUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoleListOfUser_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoleListOfUser_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoleListOfUser_argsTupleSchemeFactory implements SchemeFactory {
      public getRoleListOfUser_argsTupleScheme getScheme() {
        return new getRoleListOfUser_argsTupleScheme();
      }
    }

    private static class getRoleListOfUser_argsTupleScheme extends TupleScheme<getRoleListOfUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoleListOfUser_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.username);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoleListOfUser_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class getRoleListOfUser_result implements org.apache.thrift.TBase<getRoleListOfUser_result, getRoleListOfUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoleListOfUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoleListOfUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoleListOfUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoleListOfUser_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoleListOfUser_result.class, metaDataMap);
    }

    public getRoleListOfUser_result() {
    }

    public getRoleListOfUser_result(
      List<String> success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoleListOfUser_result(getRoleListOfUser_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public getRoleListOfUser_result deepCopy() {
      return new getRoleListOfUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getRoleListOfUser_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getRoleListOfUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public getRoleListOfUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public getRoleListOfUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoleListOfUser_result)
        return this.equals((getRoleListOfUser_result)that);
      return false;
    }

    public boolean equals(getRoleListOfUser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRoleListOfUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoleListOfUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoleListOfUser_resultStandardSchemeFactory implements SchemeFactory {
      public getRoleListOfUser_resultStandardScheme getScheme() {
        return new getRoleListOfUser_resultStandardScheme();
      }
    }

    private static class getRoleListOfUser_resultStandardScheme extends StandardScheme<getRoleListOfUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoleListOfUser_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10;
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoleListOfUser_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoleListOfUser_resultTupleSchemeFactory implements SchemeFactory {
      public getRoleListOfUser_resultTupleScheme getScheme() {
        return new getRoleListOfUser_resultTupleScheme();
      }
    }

    private static class getRoleListOfUser_resultTupleScheme extends TupleScheme<getRoleListOfUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoleListOfUser_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoleListOfUser_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15;
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getAllRoleNames_args implements org.apache.thrift.TBase<getAllRoleNames_args, getAllRoleNames_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRoleNames_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRoleNames_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllRoleNames_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllRoleNames_argsTupleSchemeFactory());
    }

    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRoleNames_args.class, metaDataMap);
    }

    public getAllRoleNames_args() {
    }

    public getAllRoleNames_args(
      String token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRoleNames_args(getAllRoleNames_args other) {
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getAllRoleNames_args deepCopy() {
      return new getAllRoleNames_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public String getToken() {
      return this.token;
    }

    public getAllRoleNames_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRoleNames_args)
        return this.equals((getAllRoleNames_args)that);
      return false;
    }

    public boolean equals(getAllRoleNames_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllRoleNames_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllRoleNames_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRoleNames_argsStandardSchemeFactory implements SchemeFactory {
      public getAllRoleNames_argsStandardScheme getScheme() {
        return new getAllRoleNames_argsStandardScheme();
      }
    }

    private static class getAllRoleNames_argsStandardScheme extends StandardScheme<getAllRoleNames_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRoleNames_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRoleNames_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRoleNames_argsTupleSchemeFactory implements SchemeFactory {
      public getAllRoleNames_argsTupleScheme getScheme() {
        return new getAllRoleNames_argsTupleScheme();
      }
    }

    private static class getAllRoleNames_argsTupleScheme extends TupleScheme<getAllRoleNames_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRoleNames_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRoleNames_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class getAllRoleNames_result implements org.apache.thrift.TBase<getAllRoleNames_result, getAllRoleNames_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllRoleNames_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllRoleNames_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllRoleNames_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllRoleNames_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllRoleNames_result.class, metaDataMap);
    }

    public getAllRoleNames_result() {
    }

    public getAllRoleNames_result(
      List<String> success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllRoleNames_result(getAllRoleNames_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public getAllRoleNames_result deepCopy() {
      return new getAllRoleNames_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getAllRoleNames_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAllRoleNames_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public getAllRoleNames_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public getAllRoleNames_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllRoleNames_result)
        return this.equals((getAllRoleNames_result)that);
      return false;
    }

    public boolean equals(getAllRoleNames_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllRoleNames_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllRoleNames_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllRoleNames_resultStandardSchemeFactory implements SchemeFactory {
      public getAllRoleNames_resultStandardScheme getScheme() {
        return new getAllRoleNames_resultStandardScheme();
      }
    }

    private static class getAllRoleNames_resultStandardScheme extends StandardScheme<getAllRoleNames_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllRoleNames_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18;
                    _elem18 = iprot.readString();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllRoleNames_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllRoleNames_resultTupleSchemeFactory implements SchemeFactory {
      public getAllRoleNames_resultTupleScheme getScheme() {
        return new getAllRoleNames_resultTupleScheme();
      }
    }

    private static class getAllRoleNames_resultTupleScheme extends TupleScheme<getAllRoleNames_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllRoleNames_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllRoleNames_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23;
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class getUserPermissions_args implements org.apache.thrift.TBase<getUserPermissions_args, getUserPermissions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserPermissions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserPermissions_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserPermissions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserPermissions_argsTupleSchemeFactory());
    }

    public String username; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      TOKEN((short)2, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserPermissions_args.class, metaDataMap);
    }

    public getUserPermissions_args() {
    }

    public getUserPermissions_args(
      String username,
      String token)
    {
      this();
      this.username = username;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserPermissions_args(getUserPermissions_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public getUserPermissions_args deepCopy() {
      return new getUserPermissions_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.token = null;
    }

    public String getUsername() {
      return this.username;
    }

    public getUserPermissions_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public getUserPermissions_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserPermissions_args)
        return this.equals((getUserPermissions_args)that);
      return false;
    }

    public boolean equals(getUserPermissions_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserPermissions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserPermissions_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (username == null) {
        throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserPermissions_argsStandardSchemeFactory implements SchemeFactory {
      public getUserPermissions_argsStandardScheme getScheme() {
        return new getUserPermissions_argsStandardScheme();
      }
    }

    private static class getUserPermissions_argsStandardScheme extends StandardScheme<getUserPermissions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserPermissions_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserPermissions_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserPermissions_argsTupleSchemeFactory implements SchemeFactory {
      public getUserPermissions_argsTupleScheme getScheme() {
        return new getUserPermissions_argsTupleScheme();
      }
    }

    private static class getUserPermissions_argsTupleScheme extends TupleScheme<getUserPermissions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserPermissions_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.username);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserPermissions_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class getUserPermissions_result implements org.apache.thrift.TBase<getUserPermissions_result, getUserPermissions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserPermissions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserPermissions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserPermissions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserPermissions_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.models.APIPermissions success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.airavata.userapi.models.APIPermissions.class)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserPermissions_result.class, metaDataMap);
    }

    public getUserPermissions_result() {
    }

    public getUserPermissions_result(
      org.apache.airavata.userapi.models.APIPermissions success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserPermissions_result(getUserPermissions_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.airavata.userapi.models.APIPermissions(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public getUserPermissions_result deepCopy() {
      return new getUserPermissions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.models.APIPermissions getSuccess() {
      return this.success;
    }

    public getUserPermissions_result setSuccess(org.apache.airavata.userapi.models.APIPermissions success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getUserPermissions_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public getUserPermissions_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public getUserPermissions_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.airavata.userapi.models.APIPermissions)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserPermissions_result)
        return this.equals((getUserPermissions_result)that);
      return false;
    }

    public boolean equals(getUserPermissions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserPermissions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserPermissions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserPermissions_resultStandardSchemeFactory implements SchemeFactory {
      public getUserPermissions_resultStandardScheme getScheme() {
        return new getUserPermissions_resultStandardScheme();
      }
    }

    private static class getUserPermissions_resultStandardScheme extends StandardScheme<getUserPermissions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserPermissions_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.airavata.userapi.models.APIPermissions();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserPermissions_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserPermissions_resultTupleSchemeFactory implements SchemeFactory {
      public getUserPermissions_resultTupleScheme getScheme() {
        return new getUserPermissions_resultTupleScheme();
      }
    }

    private static class getUserPermissions_resultTupleScheme extends TupleScheme<getUserPermissions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserPermissions_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserPermissions_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new org.apache.airavata.userapi.models.APIPermissions();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class checkPermission_args implements org.apache.thrift.TBase<checkPermission_args, checkPermission_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkPermission_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkPermission_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PERMISSION_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("permissionString", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkPermission_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkPermission_argsTupleSchemeFactory());
    }

    public String username; // required
    public String permissionString; // required
    public String token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PERMISSION_STRING((short)2, "permissionString"),
      TOKEN((short)3, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PERMISSION_STRING
            return PERMISSION_STRING;
          case 3: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERMISSION_STRING, new org.apache.thrift.meta_data.FieldMetaData("permissionString", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkPermission_args.class, metaDataMap);
    }

    public checkPermission_args() {
    }

    public checkPermission_args(
      String username,
      String permissionString,
      String token)
    {
      this();
      this.username = username;
      this.permissionString = permissionString;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkPermission_args(checkPermission_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPermissionString()) {
        this.permissionString = other.permissionString;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public checkPermission_args deepCopy() {
      return new checkPermission_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.permissionString = null;
      this.token = null;
    }

    public String getUsername() {
      return this.username;
    }

    public checkPermission_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPermissionString() {
      return this.permissionString;
    }

    public checkPermission_args setPermissionString(String permissionString) {
      this.permissionString = permissionString;
      return this;
    }

    public void unsetPermissionString() {
      this.permissionString = null;
    }

    /** Returns true if field permissionString is set (has been assigned a value) and false otherwise */
    public boolean isSetPermissionString() {
      return this.permissionString != null;
    }

    public void setPermissionStringIsSet(boolean value) {
      if (!value) {
        this.permissionString = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public checkPermission_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PERMISSION_STRING:
        if (value == null) {
          unsetPermissionString();
        } else {
          setPermissionString((String)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PERMISSION_STRING:
        return getPermissionString();

      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PERMISSION_STRING:
        return isSetPermissionString();
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkPermission_args)
        return this.equals((checkPermission_args)that);
      return false;
    }

    public boolean equals(checkPermission_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_permissionString = true && this.isSetPermissionString();
      boolean that_present_permissionString = true && that.isSetPermissionString();
      if (this_present_permissionString || that_present_permissionString) {
        if (!(this_present_permissionString && that_present_permissionString))
          return false;
        if (!this.permissionString.equals(that.permissionString))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_permissionString = true && (isSetPermissionString());
      list.add(present_permissionString);
      if (present_permissionString)
        list.add(permissionString);

      boolean present_token = true && (isSetToken());
      list.add(present_token);
      if (present_token)
        list.add(token);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkPermission_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPermissionString()).compareTo(other.isSetPermissionString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPermissionString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permissionString, other.permissionString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkPermission_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("permissionString:");
      if (this.permissionString == null) {
        sb.append("null");
      } else {
        sb.append(this.permissionString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      if (username == null) {
        throw new TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (permissionString == null) {
        throw new TProtocolException("Required field 'permissionString' was not present! Struct: " + toString());
      }
      if (token == null) {
        throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkPermission_argsStandardSchemeFactory implements SchemeFactory {
      public checkPermission_argsStandardScheme getScheme() {
        return new checkPermission_argsStandardScheme();
      }
    }

    private static class checkPermission_argsStandardScheme extends StandardScheme<checkPermission_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkPermission_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERMISSION_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.permissionString = iprot.readString();
                struct.setPermissionStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkPermission_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.permissionString != null) {
          oprot.writeFieldBegin(PERMISSION_STRING_FIELD_DESC);
          oprot.writeString(struct.permissionString);
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkPermission_argsTupleSchemeFactory implements SchemeFactory {
      public checkPermission_argsTupleScheme getScheme() {
        return new checkPermission_argsTupleScheme();
      }
    }

    private static class checkPermission_argsTupleScheme extends TupleScheme<checkPermission_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkPermission_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.username);
        oprot.writeString(struct.permissionString);
        oprot.writeString(struct.token);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkPermission_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.permissionString = iprot.readString();
        struct.setPermissionStringIsSet(true);
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class checkPermission_result implements org.apache.thrift.TBase<checkPermission_result, checkPermission_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkPermission_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkPermission_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkPermission_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkPermission_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkPermission_result.class, metaDataMap);
    }

    public checkPermission_result() {
    }

    public checkPermission_result(
      boolean success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkPermission_result(checkPermission_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public checkPermission_result deepCopy() {
      return new checkPermission_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkPermission_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public checkPermission_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public checkPermission_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public checkPermission_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkPermission_result)
        return this.equals((checkPermission_result)that);
      return false;
    }

    public boolean equals(checkPermission_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkPermission_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkPermission_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkPermission_resultStandardSchemeFactory implements SchemeFactory {
      public checkPermission_resultStandardScheme getScheme() {
        return new checkPermission_resultStandardScheme();
      }
    }

    private static class checkPermission_resultStandardScheme extends StandardScheme<checkPermission_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkPermission_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkPermission_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkPermission_resultTupleSchemeFactory implements SchemeFactory {
      public checkPermission_resultTupleScheme getScheme() {
        return new checkPermission_resultTupleScheme();
      }
    }

    private static class checkPermission_resultTupleScheme extends TupleScheme<checkPermission_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkPermission_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkPermission_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

}
