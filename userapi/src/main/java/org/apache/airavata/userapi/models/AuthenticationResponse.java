/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.userapi.models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-7-25")
public class AuthenticationResponse implements org.apache.thrift.TBase<AuthenticationResponse, AuthenticationResponse._Fields>, java.io.Serializable, Cloneable, Comparable<AuthenticationResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthenticationResponse");

  private static final org.apache.thrift.protocol.TField EXPIRES_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("expiresIn", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AuthenticationResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AuthenticationResponseTupleSchemeFactory());
  }

  public int expiresIn; // required
  public String accessToken; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPIRES_IN((short)1, "expiresIn"),
    ACCESS_TOKEN((short)2, "accessToken");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPIRES_IN
          return EXPIRES_IN;
        case 2: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXPIRESIN_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPIRES_IN, new org.apache.thrift.meta_data.FieldMetaData("expiresIn", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthenticationResponse.class, metaDataMap);
  }

  public AuthenticationResponse() {
  }

  public AuthenticationResponse(
    int expiresIn,
    String accessToken)
  {
    this();
    this.expiresIn = expiresIn;
    setExpiresInIsSet(true);
    this.accessToken = accessToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthenticationResponse(AuthenticationResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.expiresIn = other.expiresIn;
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
  }

  public AuthenticationResponse deepCopy() {
    return new AuthenticationResponse(this);
  }

  @Override
  public void clear() {
    setExpiresInIsSet(false);
    this.expiresIn = 0;
    this.accessToken = null;
  }

  public int getExpiresIn() {
    return this.expiresIn;
  }

  public AuthenticationResponse setExpiresIn(int expiresIn) {
    this.expiresIn = expiresIn;
    setExpiresInIsSet(true);
    return this;
  }

  public void unsetExpiresIn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRESIN_ISSET_ID);
  }

  /** Returns true if field expiresIn is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiresIn() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRESIN_ISSET_ID);
  }

  public void setExpiresInIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRESIN_ISSET_ID, value);
  }

  public String getAccessToken() {
    return this.accessToken;
  }

  public AuthenticationResponse setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPIRES_IN:
      if (value == null) {
        unsetExpiresIn();
      } else {
        setExpiresIn((Integer)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPIRES_IN:
      return Integer.valueOf(getExpiresIn());

    case ACCESS_TOKEN:
      return getAccessToken();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPIRES_IN:
      return isSetExpiresIn();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthenticationResponse)
      return this.equals((AuthenticationResponse)that);
    return false;
  }

  public boolean equals(AuthenticationResponse that) {
    if (that == null)
      return false;

    boolean this_present_expiresIn = true;
    boolean that_present_expiresIn = true;
    if (this_present_expiresIn || that_present_expiresIn) {
      if (!(this_present_expiresIn && that_present_expiresIn))
        return false;
      if (this.expiresIn != that.expiresIn)
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_expiresIn = true;
    list.add(present_expiresIn);
    if (present_expiresIn)
      list.add(expiresIn);

    boolean present_accessToken = true && (isSetAccessToken());
    list.add(present_accessToken);
    if (present_accessToken)
      list.add(accessToken);

    return list.hashCode();
  }

  @Override
  public int compareTo(AuthenticationResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExpiresIn()).compareTo(other.isSetExpiresIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiresIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiresIn, other.expiresIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AuthenticationResponse(");
    boolean first = true;

    sb.append("expiresIn:");
    sb.append(this.expiresIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessToken:");
    if (this.accessToken == null) {
      sb.append("null");
    } else {
      sb.append(this.accessToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'expiresIn' because it's a primitive and you chose the non-beans generator.
    if (accessToken == null) {
      throw new TProtocolException("Required field 'accessToken' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AuthenticationResponseStandardSchemeFactory implements SchemeFactory {
    public AuthenticationResponseStandardScheme getScheme() {
      return new AuthenticationResponseStandardScheme();
    }
  }

  private static class AuthenticationResponseStandardScheme extends StandardScheme<AuthenticationResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AuthenticationResponse struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPIRES_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expiresIn = iprot.readI32();
              struct.setExpiresInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetExpiresIn()) {
        throw new TProtocolException("Required field 'expiresIn' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AuthenticationResponse struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXPIRES_IN_FIELD_DESC);
      oprot.writeI32(struct.expiresIn);
      oprot.writeFieldEnd();
      if (struct.accessToken != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(struct.accessToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AuthenticationResponseTupleSchemeFactory implements SchemeFactory {
    public AuthenticationResponseTupleScheme getScheme() {
      return new AuthenticationResponseTupleScheme();
    }
  }

  private static class AuthenticationResponseTupleScheme extends TupleScheme<AuthenticationResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AuthenticationResponse struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.expiresIn);
      oprot.writeString(struct.accessToken);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AuthenticationResponse struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.expiresIn = iprot.readI32();
      struct.setExpiresInIsSet(true);
      struct.accessToken = iprot.readString();
      struct.setAccessTokenIsSet(true);
    }
  }

}

