/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.userapi.models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-7-23")
public class APIPermissions implements org.apache.thrift.TBase<APIPermissions, APIPermissions._Fields>, java.io.Serializable, Cloneable, Comparable<APIPermissions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("APIPermissions");

  private static final org.apache.thrift.protocol.TField AIRAVATA_APIPERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataAPIPermissions", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField AIRAVATA_APP_CATALOG_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("airavataAppCatalogPermissions", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new APIPermissionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new APIPermissionsTupleSchemeFactory());
  }

  public Map<String,Boolean> airavataAPIPermissions; // required
  public Map<String,Boolean> airavataAppCatalogPermissions; // required
  public String signature; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AIRAVATA_APIPERMISSIONS((short)1, "airavataAPIPermissions"),
    AIRAVATA_APP_CATALOG_PERMISSIONS((short)2, "airavataAppCatalogPermissions"),
    SIGNATURE((short)3, "signature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AIRAVATA_APIPERMISSIONS
          return AIRAVATA_APIPERMISSIONS;
        case 2: // AIRAVATA_APP_CATALOG_PERMISSIONS
          return AIRAVATA_APP_CATALOG_PERMISSIONS;
        case 3: // SIGNATURE
          return SIGNATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AIRAVATA_APIPERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("airavataAPIPermissions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.AIRAVATA_APP_CATALOG_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("airavataAppCatalogPermissions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(APIPermissions.class, metaDataMap);
  }

  public APIPermissions() {
  }

  public APIPermissions(
    Map<String,Boolean> airavataAPIPermissions,
    Map<String,Boolean> airavataAppCatalogPermissions,
    String signature)
  {
    this();
    this.airavataAPIPermissions = airavataAPIPermissions;
    this.airavataAppCatalogPermissions = airavataAppCatalogPermissions;
    this.signature = signature;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public APIPermissions(APIPermissions other) {
    if (other.isSetAiravataAPIPermissions()) {
      Map<String,Boolean> __this__airavataAPIPermissions = new HashMap<String,Boolean>(other.airavataAPIPermissions);
      this.airavataAPIPermissions = __this__airavataAPIPermissions;
    }
    if (other.isSetAiravataAppCatalogPermissions()) {
      Map<String,Boolean> __this__airavataAppCatalogPermissions = new HashMap<String,Boolean>(other.airavataAppCatalogPermissions);
      this.airavataAppCatalogPermissions = __this__airavataAppCatalogPermissions;
    }
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
  }

  public APIPermissions deepCopy() {
    return new APIPermissions(this);
  }

  @Override
  public void clear() {
    this.airavataAPIPermissions = null;
    this.airavataAppCatalogPermissions = null;
    this.signature = null;
  }

  public int getAiravataAPIPermissionsSize() {
    return (this.airavataAPIPermissions == null) ? 0 : this.airavataAPIPermissions.size();
  }

  public void putToAiravataAPIPermissions(String key, boolean val) {
    if (this.airavataAPIPermissions == null) {
      this.airavataAPIPermissions = new HashMap<String,Boolean>();
    }
    this.airavataAPIPermissions.put(key, val);
  }

  public Map<String,Boolean> getAiravataAPIPermissions() {
    return this.airavataAPIPermissions;
  }

  public APIPermissions setAiravataAPIPermissions(Map<String,Boolean> airavataAPIPermissions) {
    this.airavataAPIPermissions = airavataAPIPermissions;
    return this;
  }

  public void unsetAiravataAPIPermissions() {
    this.airavataAPIPermissions = null;
  }

  /** Returns true if field airavataAPIPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetAiravataAPIPermissions() {
    return this.airavataAPIPermissions != null;
  }

  public void setAiravataAPIPermissionsIsSet(boolean value) {
    if (!value) {
      this.airavataAPIPermissions = null;
    }
  }

  public int getAiravataAppCatalogPermissionsSize() {
    return (this.airavataAppCatalogPermissions == null) ? 0 : this.airavataAppCatalogPermissions.size();
  }

  public void putToAiravataAppCatalogPermissions(String key, boolean val) {
    if (this.airavataAppCatalogPermissions == null) {
      this.airavataAppCatalogPermissions = new HashMap<String,Boolean>();
    }
    this.airavataAppCatalogPermissions.put(key, val);
  }

  public Map<String,Boolean> getAiravataAppCatalogPermissions() {
    return this.airavataAppCatalogPermissions;
  }

  public APIPermissions setAiravataAppCatalogPermissions(Map<String,Boolean> airavataAppCatalogPermissions) {
    this.airavataAppCatalogPermissions = airavataAppCatalogPermissions;
    return this;
  }

  public void unsetAiravataAppCatalogPermissions() {
    this.airavataAppCatalogPermissions = null;
  }

  /** Returns true if field airavataAppCatalogPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetAiravataAppCatalogPermissions() {
    return this.airavataAppCatalogPermissions != null;
  }

  public void setAiravataAppCatalogPermissionsIsSet(boolean value) {
    if (!value) {
      this.airavataAppCatalogPermissions = null;
    }
  }

  public String getSignature() {
    return this.signature;
  }

  public APIPermissions setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AIRAVATA_APIPERMISSIONS:
      if (value == null) {
        unsetAiravataAPIPermissions();
      } else {
        setAiravataAPIPermissions((Map<String,Boolean>)value);
      }
      break;

    case AIRAVATA_APP_CATALOG_PERMISSIONS:
      if (value == null) {
        unsetAiravataAppCatalogPermissions();
      } else {
        setAiravataAppCatalogPermissions((Map<String,Boolean>)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AIRAVATA_APIPERMISSIONS:
      return getAiravataAPIPermissions();

    case AIRAVATA_APP_CATALOG_PERMISSIONS:
      return getAiravataAppCatalogPermissions();

    case SIGNATURE:
      return getSignature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AIRAVATA_APIPERMISSIONS:
      return isSetAiravataAPIPermissions();
    case AIRAVATA_APP_CATALOG_PERMISSIONS:
      return isSetAiravataAppCatalogPermissions();
    case SIGNATURE:
      return isSetSignature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof APIPermissions)
      return this.equals((APIPermissions)that);
    return false;
  }

  public boolean equals(APIPermissions that) {
    if (that == null)
      return false;

    boolean this_present_airavataAPIPermissions = true && this.isSetAiravataAPIPermissions();
    boolean that_present_airavataAPIPermissions = true && that.isSetAiravataAPIPermissions();
    if (this_present_airavataAPIPermissions || that_present_airavataAPIPermissions) {
      if (!(this_present_airavataAPIPermissions && that_present_airavataAPIPermissions))
        return false;
      if (!this.airavataAPIPermissions.equals(that.airavataAPIPermissions))
        return false;
    }

    boolean this_present_airavataAppCatalogPermissions = true && this.isSetAiravataAppCatalogPermissions();
    boolean that_present_airavataAppCatalogPermissions = true && that.isSetAiravataAppCatalogPermissions();
    if (this_present_airavataAppCatalogPermissions || that_present_airavataAppCatalogPermissions) {
      if (!(this_present_airavataAppCatalogPermissions && that_present_airavataAppCatalogPermissions))
        return false;
      if (!this.airavataAppCatalogPermissions.equals(that.airavataAppCatalogPermissions))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_airavataAPIPermissions = true && (isSetAiravataAPIPermissions());
    list.add(present_airavataAPIPermissions);
    if (present_airavataAPIPermissions)
      list.add(airavataAPIPermissions);

    boolean present_airavataAppCatalogPermissions = true && (isSetAiravataAppCatalogPermissions());
    list.add(present_airavataAppCatalogPermissions);
    if (present_airavataAppCatalogPermissions)
      list.add(airavataAppCatalogPermissions);

    boolean present_signature = true && (isSetSignature());
    list.add(present_signature);
    if (present_signature)
      list.add(signature);

    return list.hashCode();
  }

  @Override
  public int compareTo(APIPermissions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAiravataAPIPermissions()).compareTo(other.isSetAiravataAPIPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAiravataAPIPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataAPIPermissions, other.airavataAPIPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAiravataAppCatalogPermissions()).compareTo(other.isSetAiravataAppCatalogPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAiravataAppCatalogPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.airavataAppCatalogPermissions, other.airavataAppCatalogPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("APIPermissions(");
    boolean first = true;

    sb.append("airavataAPIPermissions:");
    if (this.airavataAPIPermissions == null) {
      sb.append("null");
    } else {
      sb.append(this.airavataAPIPermissions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("airavataAppCatalogPermissions:");
    if (this.airavataAppCatalogPermissions == null) {
      sb.append("null");
    } else {
      sb.append(this.airavataAppCatalogPermissions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      sb.append(this.signature);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (airavataAPIPermissions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataAPIPermissions' was not present! Struct: " + toString());
    }
    if (airavataAppCatalogPermissions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'airavataAppCatalogPermissions' was not present! Struct: " + toString());
    }
    if (signature == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'signature' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class APIPermissionsStandardSchemeFactory implements SchemeFactory {
    public APIPermissionsStandardScheme getScheme() {
      return new APIPermissionsStandardScheme();
    }
  }

  private static class APIPermissionsStandardScheme extends StandardScheme<APIPermissions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, APIPermissions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AIRAVATA_APIPERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.airavataAPIPermissions = new HashMap<String,Boolean>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  boolean _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readBool();
                  struct.airavataAPIPermissions.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setAiravataAPIPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AIRAVATA_APP_CATALOG_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.airavataAppCatalogPermissions = new HashMap<String,Boolean>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  String _key6;
                  boolean _val7;
                  _key6 = iprot.readString();
                  _val7 = iprot.readBool();
                  struct.airavataAppCatalogPermissions.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setAiravataAppCatalogPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, APIPermissions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.airavataAPIPermissions != null) {
        oprot.writeFieldBegin(AIRAVATA_APIPERMISSIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct.airavataAPIPermissions.size()));
          for (Map.Entry<String, Boolean> _iter8 : struct.airavataAPIPermissions.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            oprot.writeBool(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.airavataAppCatalogPermissions != null) {
        oprot.writeFieldBegin(AIRAVATA_APP_CATALOG_PERMISSIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, struct.airavataAppCatalogPermissions.size()));
          for (Map.Entry<String, Boolean> _iter9 : struct.airavataAppCatalogPermissions.entrySet())
          {
            oprot.writeString(_iter9.getKey());
            oprot.writeBool(_iter9.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeString(struct.signature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class APIPermissionsTupleSchemeFactory implements SchemeFactory {
    public APIPermissionsTupleScheme getScheme() {
      return new APIPermissionsTupleScheme();
    }
  }

  private static class APIPermissionsTupleScheme extends TupleScheme<APIPermissions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, APIPermissions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.airavataAPIPermissions.size());
        for (Map.Entry<String, Boolean> _iter10 : struct.airavataAPIPermissions.entrySet())
        {
          oprot.writeString(_iter10.getKey());
          oprot.writeBool(_iter10.getValue());
        }
      }
      {
        oprot.writeI32(struct.airavataAppCatalogPermissions.size());
        for (Map.Entry<String, Boolean> _iter11 : struct.airavataAppCatalogPermissions.entrySet())
        {
          oprot.writeString(_iter11.getKey());
          oprot.writeBool(_iter11.getValue());
        }
      }
      oprot.writeString(struct.signature);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, APIPermissions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.airavataAPIPermissions = new HashMap<String,Boolean>(2*_map12.size);
        for (int _i13 = 0; _i13 < _map12.size; ++_i13)
        {
          String _key14;
          boolean _val15;
          _key14 = iprot.readString();
          _val15 = iprot.readBool();
          struct.airavataAPIPermissions.put(_key14, _val15);
        }
      }
      struct.setAiravataAPIPermissionsIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
        struct.airavataAppCatalogPermissions = new HashMap<String,Boolean>(2*_map16.size);
        for (int _i17 = 0; _i17 < _map16.size; ++_i17)
        {
          String _key18;
          boolean _val19;
          _key18 = iprot.readString();
          _val19 = iprot.readBool();
          struct.airavataAppCatalogPermissions.put(_key18, _val19);
        }
      }
      struct.setAiravataAppCatalogPermissionsIsSet(true);
      struct.signature = iprot.readString();
      struct.setSignatureIsSet(true);
    }
  }

}

