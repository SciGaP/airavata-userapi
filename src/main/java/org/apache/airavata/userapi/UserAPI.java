/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.userapi;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-6-13")
public class UserAPI {

  public interface Iface {

    /**
     * Query UserAPI to fetch the API version
     */
    public String getAPIVersion() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException;

    /**
     * Login Admin
     * 
     * 
     * @param username
     * @param password
     */
    public String adminLogin(String username, String password) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, org.apache.thrift.TException;

    /**
     * Logout Admin
     * 
     */
    public void adminLogout() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, org.apache.thrift.TException;

    /**
     * Check username exists
     * 
     * 
     * @param username
     */
    public boolean checkUsernameExists(String username) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException;

    /**
     * Add new user
     * 
     * 
     * @param userName
     * @param password
     */
    public void createNewUser(String userName, String password) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException;

    /**
     * Remove user
     * 
     * 
     * @param userName
     */
    public void removeUser(String userName) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException;

    /**
     * Update user password
     * 
     * 
     * @param userName
     * @param newPassword
     */
    public void updateUserPassword(String userName, String newPassword) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException;

    /**
     * Activate user
     * 
     * 
     * @param userName
     */
    public void activateUser(String userName) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException;

    /**
     * Deactivate user
     * 
     * 
     * @param userName
     */
    public void deactivateUser(String userName) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException;

    /**
     * Authenticate user
     * 
     * 
     * @param userName
     * @param password
     */
    public void authenticateUser(String userName, String password) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void adminLogin(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void adminLogout(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkUsernameExists(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createNewUser(String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateUserPassword(String userName, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void activateUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deactivateUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void authenticateUser(String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getAPIVersion() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      send_getAPIVersion();
      return recv_getAPIVersion();
    }

    public void send_getAPIVersion() throws org.apache.thrift.TException
    {
      getAPIVersion_args args = new getAPIVersion_args();
      sendBase("getAPIVersion", args);
    }

    public String recv_getAPIVersion() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      getAPIVersion_result result = new getAPIVersion_result();
      receiveBase(result, "getAPIVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAPIVersion failed: unknown result");
    }

    public String adminLogin(String username, String password) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, org.apache.thrift.TException
    {
      send_adminLogin(username, password);
      return recv_adminLogin();
    }

    public void send_adminLogin(String username, String password) throws org.apache.thrift.TException
    {
      adminLogin_args args = new adminLogin_args();
      args.setUsername(username);
      args.setPassword(password);
      sendBase("adminLogin", args);
    }

    public String recv_adminLogin() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, org.apache.thrift.TException
    {
      adminLogin_result result = new adminLogin_result();
      receiveBase(result, "adminLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.are != null) {
        throw result.are;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "adminLogin failed: unknown result");
    }

    public void adminLogout() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, org.apache.thrift.TException
    {
      send_adminLogout();
      recv_adminLogout();
    }

    public void send_adminLogout() throws org.apache.thrift.TException
    {
      adminLogout_args args = new adminLogout_args();
      sendBase("adminLogout", args);
    }

    public void recv_adminLogout() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, org.apache.thrift.TException
    {
      adminLogout_result result = new adminLogout_result();
      receiveBase(result, "adminLogout");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.are != null) {
        throw result.are;
      }
      return;
    }

    public boolean checkUsernameExists(String username) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      send_checkUsernameExists(username);
      return recv_checkUsernameExists();
    }

    public void send_checkUsernameExists(String username) throws org.apache.thrift.TException
    {
      checkUsernameExists_args args = new checkUsernameExists_args();
      args.setUsername(username);
      sendBase("checkUsernameExists", args);
    }

    public boolean recv_checkUsernameExists() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      checkUsernameExists_result result = new checkUsernameExists_result();
      receiveBase(result, "checkUsernameExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkUsernameExists failed: unknown result");
    }

    public void createNewUser(String userName, String password) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      send_createNewUser(userName, password);
      recv_createNewUser();
    }

    public void send_createNewUser(String userName, String password) throws org.apache.thrift.TException
    {
      createNewUser_args args = new createNewUser_args();
      args.setUserName(userName);
      args.setPassword(password);
      sendBase("createNewUser", args);
    }

    public void recv_createNewUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      createNewUser_result result = new createNewUser_result();
      receiveBase(result, "createNewUser");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void removeUser(String userName) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      send_removeUser(userName);
      recv_removeUser();
    }

    public void send_removeUser(String userName) throws org.apache.thrift.TException
    {
      removeUser_args args = new removeUser_args();
      args.setUserName(userName);
      sendBase("removeUser", args);
    }

    public void recv_removeUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      removeUser_result result = new removeUser_result();
      receiveBase(result, "removeUser");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void updateUserPassword(String userName, String newPassword) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      send_updateUserPassword(userName, newPassword);
      recv_updateUserPassword();
    }

    public void send_updateUserPassword(String userName, String newPassword) throws org.apache.thrift.TException
    {
      updateUserPassword_args args = new updateUserPassword_args();
      args.setUserName(userName);
      args.setNewPassword(newPassword);
      sendBase("updateUserPassword", args);
    }

    public void recv_updateUserPassword() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      updateUserPassword_result result = new updateUserPassword_result();
      receiveBase(result, "updateUserPassword");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void activateUser(String userName) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      send_activateUser(userName);
      recv_activateUser();
    }

    public void send_activateUser(String userName) throws org.apache.thrift.TException
    {
      activateUser_args args = new activateUser_args();
      args.setUserName(userName);
      sendBase("activateUser", args);
    }

    public void recv_activateUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      activateUser_result result = new activateUser_result();
      receiveBase(result, "activateUser");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void deactivateUser(String userName) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      send_deactivateUser(userName);
      recv_deactivateUser();
    }

    public void send_deactivateUser(String userName) throws org.apache.thrift.TException
    {
      deactivateUser_args args = new deactivateUser_args();
      args.setUserName(userName);
      sendBase("deactivateUser", args);
    }

    public void recv_deactivateUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      deactivateUser_result result = new deactivateUser_result();
      receiveBase(result, "deactivateUser");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

    public void authenticateUser(String userName, String password) throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      send_authenticateUser(userName, password);
      recv_authenticateUser();
    }

    public void send_authenticateUser(String userName, String password) throws org.apache.thrift.TException
    {
      authenticateUser_args args = new authenticateUser_args();
      args.setUserName(userName);
      args.setPassword(password);
      sendBase("authenticateUser", args);
    }

    public void recv_authenticateUser() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException
    {
      authenticateUser_result result = new authenticateUser_result();
      receiveBase(result, "authenticateUser");
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.are != null) {
        throw result.are;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAPIVersion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAPIVersion_call method_call = new getAPIVersion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAPIVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAPIVersion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAPIVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAPIVersion_args args = new getAPIVersion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAPIVersion();
      }
    }

    public void adminLogin(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      adminLogin_call method_call = new adminLogin_call(username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class adminLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      private String password;
      public adminLogin_call(String username, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("adminLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        adminLogin_args args = new adminLogin_args();
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_adminLogin();
      }
    }

    public void adminLogout(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      adminLogout_call method_call = new adminLogout_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class adminLogout_call extends org.apache.thrift.async.TAsyncMethodCall {
      public adminLogout_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("adminLogout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        adminLogout_args args = new adminLogout_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.airavata.userapi.error.AuthenticationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_adminLogout();
      }
    }

    public void checkUsernameExists(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkUsernameExists_call method_call = new checkUsernameExists_call(username, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkUsernameExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String username;
      public checkUsernameExists_call(String username, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.username = username;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkUsernameExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkUsernameExists_args args = new checkUsernameExists_args();
        args.setUsername(username);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkUsernameExists();
      }
    }

    public void createNewUser(String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createNewUser_call method_call = new createNewUser_call(userName, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createNewUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String password;
      public createNewUser_call(String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createNewUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createNewUser_args args = new createNewUser_args();
        args.setUserName(userName);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createNewUser();
      }
    }

    public void removeUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeUser_call method_call = new removeUser_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public removeUser_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeUser_args args = new removeUser_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeUser();
      }
    }

    public void updateUserPassword(String userName, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateUserPassword_call method_call = new updateUserPassword_call(userName, newPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateUserPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String newPassword;
      public updateUserPassword_call(String userName, String newPassword, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.newPassword = newPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateUserPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateUserPassword_args args = new updateUserPassword_args();
        args.setUserName(userName);
        args.setNewPassword(newPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateUserPassword();
      }
    }

    public void activateUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateUser_call method_call = new activateUser_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public activateUser_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateUser_args args = new activateUser_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_activateUser();
      }
    }

    public void deactivateUser(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deactivateUser_call method_call = new deactivateUser_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deactivateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public deactivateUser_call(String userName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deactivateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deactivateUser_args args = new deactivateUser_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deactivateUser();
      }
    }

    public void authenticateUser(String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authenticateUser_call method_call = new authenticateUser_call(userName, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authenticateUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      private String password;
      public authenticateUser_call(String userName, String password, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
        this.password = password;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authenticateUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authenticateUser_args args = new authenticateUser_args();
        args.setUserName(userName);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.airavata.userapi.error.InvalidRequestException, org.apache.airavata.userapi.error.AuthorizationException, org.apache.airavata.userapi.error.UserAPISystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_authenticateUser();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAPIVersion", new getAPIVersion());
      processMap.put("adminLogin", new adminLogin());
      processMap.put("adminLogout", new adminLogout());
      processMap.put("checkUsernameExists", new checkUsernameExists());
      processMap.put("createNewUser", new createNewUser());
      processMap.put("removeUser", new removeUser());
      processMap.put("updateUserPassword", new updateUserPassword());
      processMap.put("activateUser", new activateUser());
      processMap.put("deactivateUser", new deactivateUser());
      processMap.put("authenticateUser", new authenticateUser());
      return processMap;
    }

    public static class getAPIVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAPIVersion_args> {
      public getAPIVersion() {
        super("getAPIVersion");
      }

      public getAPIVersion_args getEmptyArgsInstance() {
        return new getAPIVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAPIVersion_result getResult(I iface, getAPIVersion_args args) throws org.apache.thrift.TException {
        getAPIVersion_result result = new getAPIVersion_result();
        try {
          result.success = iface.getAPIVersion();
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class adminLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, adminLogin_args> {
      public adminLogin() {
        super("adminLogin");
      }

      public adminLogin_args getEmptyArgsInstance() {
        return new adminLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public adminLogin_result getResult(I iface, adminLogin_args args) throws org.apache.thrift.TException {
        adminLogin_result result = new adminLogin_result();
        try {
          result.success = iface.adminLogin(args.username, args.password);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        } catch (org.apache.airavata.userapi.error.AuthenticationException are) {
          result.are = are;
        }
        return result;
      }
    }

    public static class adminLogout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, adminLogout_args> {
      public adminLogout() {
        super("adminLogout");
      }

      public adminLogout_args getEmptyArgsInstance() {
        return new adminLogout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public adminLogout_result getResult(I iface, adminLogout_args args) throws org.apache.thrift.TException {
        adminLogout_result result = new adminLogout_result();
        try {
          iface.adminLogout();
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        } catch (org.apache.airavata.userapi.error.AuthenticationException are) {
          result.are = are;
        }
        return result;
      }
    }

    public static class checkUsernameExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkUsernameExists_args> {
      public checkUsernameExists() {
        super("checkUsernameExists");
      }

      public checkUsernameExists_args getEmptyArgsInstance() {
        return new checkUsernameExists_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkUsernameExists_result getResult(I iface, checkUsernameExists_args args) throws org.apache.thrift.TException {
        checkUsernameExists_result result = new checkUsernameExists_result();
        try {
          result.success = iface.checkUsernameExists(args.username);
          result.setSuccessIsSet(true);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class createNewUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createNewUser_args> {
      public createNewUser() {
        super("createNewUser");
      }

      public createNewUser_args getEmptyArgsInstance() {
        return new createNewUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createNewUser_result getResult(I iface, createNewUser_args args) throws org.apache.thrift.TException {
        createNewUser_result result = new createNewUser_result();
        try {
          iface.createNewUser(args.userName, args.password);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class removeUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeUser_args> {
      public removeUser() {
        super("removeUser");
      }

      public removeUser_args getEmptyArgsInstance() {
        return new removeUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeUser_result getResult(I iface, removeUser_args args) throws org.apache.thrift.TException {
        removeUser_result result = new removeUser_result();
        try {
          iface.removeUser(args.userName);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class updateUserPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateUserPassword_args> {
      public updateUserPassword() {
        super("updateUserPassword");
      }

      public updateUserPassword_args getEmptyArgsInstance() {
        return new updateUserPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateUserPassword_result getResult(I iface, updateUserPassword_args args) throws org.apache.thrift.TException {
        updateUserPassword_result result = new updateUserPassword_result();
        try {
          iface.updateUserPassword(args.userName, args.newPassword);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class activateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateUser_args> {
      public activateUser() {
        super("activateUser");
      }

      public activateUser_args getEmptyArgsInstance() {
        return new activateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateUser_result getResult(I iface, activateUser_args args) throws org.apache.thrift.TException {
        activateUser_result result = new activateUser_result();
        try {
          iface.activateUser(args.userName);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class deactivateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deactivateUser_args> {
      public deactivateUser() {
        super("deactivateUser");
      }

      public deactivateUser_args getEmptyArgsInstance() {
        return new deactivateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deactivateUser_result getResult(I iface, deactivateUser_args args) throws org.apache.thrift.TException {
        deactivateUser_result result = new deactivateUser_result();
        try {
          iface.deactivateUser(args.userName);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

    public static class authenticateUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authenticateUser_args> {
      public authenticateUser() {
        super("authenticateUser");
      }

      public authenticateUser_args getEmptyArgsInstance() {
        return new authenticateUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authenticateUser_result getResult(I iface, authenticateUser_args args) throws org.apache.thrift.TException {
        authenticateUser_result result = new authenticateUser_result();
        try {
          iface.authenticateUser(args.userName, args.password);
        } catch (org.apache.airavata.userapi.error.InvalidRequestException ire) {
          result.ire = ire;
        } catch (org.apache.airavata.userapi.error.AuthorizationException are) {
          result.are = are;
        } catch (org.apache.airavata.userapi.error.UserAPISystemException ase) {
          result.ase = ase;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAPIVersion", new getAPIVersion());
      processMap.put("adminLogin", new adminLogin());
      processMap.put("adminLogout", new adminLogout());
      processMap.put("checkUsernameExists", new checkUsernameExists());
      processMap.put("createNewUser", new createNewUser());
      processMap.put("removeUser", new removeUser());
      processMap.put("updateUserPassword", new updateUserPassword());
      processMap.put("activateUser", new activateUser());
      processMap.put("deactivateUser", new deactivateUser());
      processMap.put("authenticateUser", new authenticateUser());
      return processMap;
    }

    public static class getAPIVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAPIVersion_args, String> {
      public getAPIVersion() {
        super("getAPIVersion");
      }

      public getAPIVersion_args getEmptyArgsInstance() {
        return new getAPIVersion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getAPIVersion_result result = new getAPIVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAPIVersion_result result = new getAPIVersion_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAPIVersion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getAPIVersion(resultHandler);
      }
    }

    public static class adminLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, adminLogin_args, String> {
      public adminLogin() {
        super("adminLogin");
      }

      public adminLogin_args getEmptyArgsInstance() {
        return new adminLogin_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            adminLogin_result result = new adminLogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            adminLogin_result result = new adminLogin_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthenticationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthenticationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, adminLogin_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.adminLogin(args.username, args.password,resultHandler);
      }
    }

    public static class adminLogout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, adminLogout_args, Void> {
      public adminLogout() {
        super("adminLogout");
      }

      public adminLogout_args getEmptyArgsInstance() {
        return new adminLogout_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            adminLogout_result result = new adminLogout_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            adminLogout_result result = new adminLogout_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthenticationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthenticationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, adminLogout_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.adminLogout(resultHandler);
      }
    }

    public static class checkUsernameExists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkUsernameExists_args, Boolean> {
      public checkUsernameExists() {
        super("checkUsernameExists");
      }

      public checkUsernameExists_args getEmptyArgsInstance() {
        return new checkUsernameExists_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkUsernameExists_result result = new checkUsernameExists_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkUsernameExists_result result = new checkUsernameExists_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkUsernameExists_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkUsernameExists(args.username,resultHandler);
      }
    }

    public static class createNewUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createNewUser_args, Void> {
      public createNewUser() {
        super("createNewUser");
      }

      public createNewUser_args getEmptyArgsInstance() {
        return new createNewUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            createNewUser_result result = new createNewUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createNewUser_result result = new createNewUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createNewUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.createNewUser(args.userName, args.password,resultHandler);
      }
    }

    public static class removeUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeUser_args, Void> {
      public removeUser() {
        super("removeUser");
      }

      public removeUser_args getEmptyArgsInstance() {
        return new removeUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeUser_result result = new removeUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeUser_result result = new removeUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeUser(args.userName,resultHandler);
      }
    }

    public static class updateUserPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateUserPassword_args, Void> {
      public updateUserPassword() {
        super("updateUserPassword");
      }

      public updateUserPassword_args getEmptyArgsInstance() {
        return new updateUserPassword_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateUserPassword_result result = new updateUserPassword_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateUserPassword_result result = new updateUserPassword_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateUserPassword_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateUserPassword(args.userName, args.newPassword,resultHandler);
      }
    }

    public static class activateUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateUser_args, Void> {
      public activateUser() {
        super("activateUser");
      }

      public activateUser_args getEmptyArgsInstance() {
        return new activateUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            activateUser_result result = new activateUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateUser_result result = new activateUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.activateUser(args.userName,resultHandler);
      }
    }

    public static class deactivateUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deactivateUser_args, Void> {
      public deactivateUser() {
        super("deactivateUser");
      }

      public deactivateUser_args getEmptyArgsInstance() {
        return new deactivateUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deactivateUser_result result = new deactivateUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deactivateUser_result result = new deactivateUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deactivateUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deactivateUser(args.userName,resultHandler);
      }
    }

    public static class authenticateUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authenticateUser_args, Void> {
      public authenticateUser() {
        super("authenticateUser");
      }

      public authenticateUser_args getEmptyArgsInstance() {
        return new authenticateUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            authenticateUser_result result = new authenticateUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authenticateUser_result result = new authenticateUser_result();
            if (e instanceof org.apache.airavata.userapi.error.InvalidRequestException) {
                        result.ire = (org.apache.airavata.userapi.error.InvalidRequestException) e;
                        result.setIreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.AuthorizationException) {
                        result.are = (org.apache.airavata.userapi.error.AuthorizationException) e;
                        result.setAreIsSet(true);
                        msg = result;
            }
            else             if (e instanceof org.apache.airavata.userapi.error.UserAPISystemException) {
                        result.ase = (org.apache.airavata.userapi.error.UserAPISystemException) e;
                        result.setAseIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authenticateUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.authenticateUser(args.userName, args.password,resultHandler);
      }
    }

  }

  public static class getAPIVersion_args implements org.apache.thrift.TBase<getAPIVersion_args, getAPIVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAPIVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAPIVersion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAPIVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAPIVersion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAPIVersion_args.class, metaDataMap);
    }

    public getAPIVersion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAPIVersion_args(getAPIVersion_args other) {
    }

    public getAPIVersion_args deepCopy() {
      return new getAPIVersion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAPIVersion_args)
        return this.equals((getAPIVersion_args)that);
      return false;
    }

    public boolean equals(getAPIVersion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getAPIVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAPIVersion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAPIVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getAPIVersion_argsStandardScheme getScheme() {
        return new getAPIVersion_argsStandardScheme();
      }
    }

    private static class getAPIVersion_argsStandardScheme extends StandardScheme<getAPIVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAPIVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAPIVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAPIVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getAPIVersion_argsTupleScheme getScheme() {
        return new getAPIVersion_argsTupleScheme();
      }
    }

    private static class getAPIVersion_argsTupleScheme extends TupleScheme<getAPIVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAPIVersion_result implements org.apache.thrift.TBase<getAPIVersion_result, getAPIVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAPIVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAPIVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAPIVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAPIVersion_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ASE((short)2, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAPIVersion_result.class, metaDataMap);
    }

    public getAPIVersion_result() {
    }

    public getAPIVersion_result(
      String success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAPIVersion_result(getAPIVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public getAPIVersion_result deepCopy() {
      return new getAPIVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ase = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getAPIVersion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public getAPIVersion_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public getAPIVersion_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAPIVersion_result)
        return this.equals((getAPIVersion_result)that);
      return false;
    }

    public boolean equals(getAPIVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAPIVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAPIVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAPIVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getAPIVersion_resultStandardScheme getScheme() {
        return new getAPIVersion_resultStandardScheme();
      }
    }

    private static class getAPIVersion_resultStandardScheme extends StandardScheme<getAPIVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAPIVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAPIVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAPIVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getAPIVersion_resultTupleScheme getScheme() {
        return new getAPIVersion_resultTupleScheme();
      }
    }

    private static class getAPIVersion_resultTupleScheme extends TupleScheme<getAPIVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAPIVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class adminLogin_args implements org.apache.thrift.TBase<adminLogin_args, adminLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<adminLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adminLogin_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adminLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adminLogin_argsTupleSchemeFactory());
    }

    public String username; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adminLogin_args.class, metaDataMap);
    }

    public adminLogin_args() {
    }

    public adminLogin_args(
      String username,
      String password)
    {
      this();
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adminLogin_args(adminLogin_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public adminLogin_args deepCopy() {
      return new adminLogin_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
      this.password = null;
    }

    public String getUsername() {
      return this.username;
    }

    public adminLogin_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public adminLogin_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adminLogin_args)
        return this.equals((adminLogin_args)that);
      return false;
    }

    public boolean equals(adminLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(adminLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adminLogin_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (username == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adminLogin_argsStandardSchemeFactory implements SchemeFactory {
      public adminLogin_argsStandardScheme getScheme() {
        return new adminLogin_argsStandardScheme();
      }
    }

    private static class adminLogin_argsStandardScheme extends StandardScheme<adminLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adminLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adminLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adminLogin_argsTupleSchemeFactory implements SchemeFactory {
      public adminLogin_argsTupleScheme getScheme() {
        return new adminLogin_argsTupleScheme();
      }
    }

    private static class adminLogin_argsTupleScheme extends TupleScheme<adminLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adminLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.username);
        oprot.writeString(struct.password);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adminLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
    }

  }

  public static class adminLogin_result implements org.apache.thrift.TBase<adminLogin_result, adminLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<adminLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adminLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adminLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adminLogin_resultTupleSchemeFactory());
    }

    public String success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required
    public org.apache.airavata.userapi.error.AuthenticationException are; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ASE((short)2, "ase"),
      ARE((short)3, "are");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ASE
            return ASE;
          case 3: // ARE
            return ARE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adminLogin_result.class, metaDataMap);
    }

    public adminLogin_result() {
    }

    public adminLogin_result(
      String success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.UserAPISystemException ase,
      org.apache.airavata.userapi.error.AuthenticationException are)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ase = ase;
      this.are = are;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adminLogin_result(adminLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthenticationException(other.are);
      }
    }

    public adminLogin_result deepCopy() {
      return new adminLogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ase = null;
      this.are = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public adminLogin_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public adminLogin_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public adminLogin_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthenticationException getAre() {
      return this.are;
    }

    public adminLogin_result setAre(org.apache.airavata.userapi.error.AuthenticationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthenticationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case ASE:
        return getAse();

      case ARE:
        return getAre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ASE:
        return isSetAse();
      case ARE:
        return isSetAre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adminLogin_result)
        return this.equals((adminLogin_result)that);
      return false;
    }

    public boolean equals(adminLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      return list.hashCode();
    }

    @Override
    public int compareTo(adminLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adminLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adminLogin_resultStandardSchemeFactory implements SchemeFactory {
      public adminLogin_resultStandardScheme getScheme() {
        return new adminLogin_resultStandardScheme();
      }
    }

    private static class adminLogin_resultStandardScheme extends StandardScheme<adminLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adminLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthenticationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adminLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adminLogin_resultTupleSchemeFactory implements SchemeFactory {
      public adminLogin_resultTupleScheme getScheme() {
        return new adminLogin_resultTupleScheme();
      }
    }

    private static class adminLogin_resultTupleScheme extends TupleScheme<adminLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adminLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        if (struct.isSetAre()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adminLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.are = new org.apache.airavata.userapi.error.AuthenticationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
      }
    }

  }

  public static class adminLogout_args implements org.apache.thrift.TBase<adminLogout_args, adminLogout_args._Fields>, java.io.Serializable, Cloneable, Comparable<adminLogout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adminLogout_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adminLogout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adminLogout_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adminLogout_args.class, metaDataMap);
    }

    public adminLogout_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adminLogout_args(adminLogout_args other) {
    }

    public adminLogout_args deepCopy() {
      return new adminLogout_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adminLogout_args)
        return this.equals((adminLogout_args)that);
      return false;
    }

    public boolean equals(adminLogout_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(adminLogout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adminLogout_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adminLogout_argsStandardSchemeFactory implements SchemeFactory {
      public adminLogout_argsStandardScheme getScheme() {
        return new adminLogout_argsStandardScheme();
      }
    }

    private static class adminLogout_argsStandardScheme extends StandardScheme<adminLogout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adminLogout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adminLogout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adminLogout_argsTupleSchemeFactory implements SchemeFactory {
      public adminLogout_argsTupleScheme getScheme() {
        return new adminLogout_argsTupleScheme();
      }
    }

    private static class adminLogout_argsTupleScheme extends TupleScheme<adminLogout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adminLogout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adminLogout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class adminLogout_result implements org.apache.thrift.TBase<adminLogout_result, adminLogout_result._Fields>, java.io.Serializable, Cloneable, Comparable<adminLogout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adminLogout_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new adminLogout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new adminLogout_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required
    public org.apache.airavata.userapi.error.AuthenticationException are; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ASE((short)2, "ase"),
      ARE((short)3, "are");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ASE
            return ASE;
          case 3: // ARE
            return ARE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adminLogout_result.class, metaDataMap);
    }

    public adminLogout_result() {
    }

    public adminLogout_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.UserAPISystemException ase,
      org.apache.airavata.userapi.error.AuthenticationException are)
    {
      this();
      this.ire = ire;
      this.ase = ase;
      this.are = are;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adminLogout_result(adminLogout_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthenticationException(other.are);
      }
    }

    public adminLogout_result deepCopy() {
      return new adminLogout_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.ase = null;
      this.are = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public adminLogout_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public adminLogout_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthenticationException getAre() {
      return this.are;
    }

    public adminLogout_result setAre(org.apache.airavata.userapi.error.AuthenticationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthenticationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ASE:
        return getAse();

      case ARE:
        return getAre();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ASE:
        return isSetAse();
      case ARE:
        return isSetAre();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof adminLogout_result)
        return this.equals((adminLogout_result)that);
      return false;
    }

    public boolean equals(adminLogout_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      return list.hashCode();
    }

    @Override
    public int compareTo(adminLogout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("adminLogout_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adminLogout_resultStandardSchemeFactory implements SchemeFactory {
      public adminLogout_resultStandardScheme getScheme() {
        return new adminLogout_resultStandardScheme();
      }
    }

    private static class adminLogout_resultStandardScheme extends StandardScheme<adminLogout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adminLogout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthenticationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adminLogout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adminLogout_resultTupleSchemeFactory implements SchemeFactory {
      public adminLogout_resultTupleScheme getScheme() {
        return new adminLogout_resultTupleScheme();
      }
    }

    private static class adminLogout_resultTupleScheme extends TupleScheme<adminLogout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adminLogout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAse()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adminLogout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthenticationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
      }
    }

  }

  public static class checkUsernameExists_args implements org.apache.thrift.TBase<checkUsernameExists_args, checkUsernameExists_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkUsernameExists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUsernameExists_args");

    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUsernameExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUsernameExists_argsTupleSchemeFactory());
    }

    public String username; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERNAME((short)1, "username");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERNAME
            return USERNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUsernameExists_args.class, metaDataMap);
    }

    public checkUsernameExists_args() {
    }

    public checkUsernameExists_args(
      String username)
    {
      this();
      this.username = username;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUsernameExists_args(checkUsernameExists_args other) {
      if (other.isSetUsername()) {
        this.username = other.username;
      }
    }

    public checkUsernameExists_args deepCopy() {
      return new checkUsernameExists_args(this);
    }

    @Override
    public void clear() {
      this.username = null;
    }

    public String getUsername() {
      return this.username;
    }

    public checkUsernameExists_args setUsername(String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERNAME:
        return getUsername();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERNAME:
        return isSetUsername();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUsernameExists_args)
        return this.equals((checkUsernameExists_args)that);
      return false;
    }

    public boolean equals(checkUsernameExists_args that) {
      if (that == null)
        return false;

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_username = true && (isSetUsername());
      list.add(present_username);
      if (present_username)
        list.add(username);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkUsernameExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUsernameExists_args(");
      boolean first = true;

      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (username == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUsernameExists_argsStandardSchemeFactory implements SchemeFactory {
      public checkUsernameExists_argsStandardScheme getScheme() {
        return new checkUsernameExists_argsStandardScheme();
      }
    }

    private static class checkUsernameExists_argsStandardScheme extends StandardScheme<checkUsernameExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUsernameExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUsernameExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUsernameExists_argsTupleSchemeFactory implements SchemeFactory {
      public checkUsernameExists_argsTupleScheme getScheme() {
        return new checkUsernameExists_argsTupleScheme();
      }
    }

    private static class checkUsernameExists_argsTupleScheme extends TupleScheme<checkUsernameExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUsernameExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.username);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUsernameExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
    }

  }

  public static class checkUsernameExists_result implements org.apache.thrift.TBase<checkUsernameExists_result, checkUsernameExists_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkUsernameExists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUsernameExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUsernameExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUsernameExists_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUsernameExists_result.class, metaDataMap);
    }

    public checkUsernameExists_result() {
    }

    public checkUsernameExists_result(
      boolean success,
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUsernameExists_result(checkUsernameExists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public checkUsernameExists_result deepCopy() {
      return new checkUsernameExists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkUsernameExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public checkUsernameExists_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public checkUsernameExists_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public checkUsernameExists_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUsernameExists_result)
        return this.equals((checkUsernameExists_result)that);
      return false;
    }

    public boolean equals(checkUsernameExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkUsernameExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUsernameExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUsernameExists_resultStandardSchemeFactory implements SchemeFactory {
      public checkUsernameExists_resultStandardScheme getScheme() {
        return new checkUsernameExists_resultStandardScheme();
      }
    }

    private static class checkUsernameExists_resultStandardScheme extends StandardScheme<checkUsernameExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUsernameExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUsernameExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUsernameExists_resultTupleSchemeFactory implements SchemeFactory {
      public checkUsernameExists_resultTupleScheme getScheme() {
        return new checkUsernameExists_resultTupleScheme();
      }
    }

    private static class checkUsernameExists_resultTupleScheme extends TupleScheme<checkUsernameExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUsernameExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIre()) {
          optionals.set(1);
        }
        if (struct.isSetAre()) {
          optionals.set(2);
        }
        if (struct.isSetAse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUsernameExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class createNewUser_args implements org.apache.thrift.TBase<createNewUser_args, createNewUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createNewUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewUser_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewUser_args.class, metaDataMap);
    }

    public createNewUser_args() {
    }

    public createNewUser_args(
      String userName,
      String password)
    {
      this();
      this.userName = userName;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewUser_args(createNewUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public createNewUser_args deepCopy() {
      return new createNewUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.password = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public createNewUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public createNewUser_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewUser_args)
        return this.equals((createNewUser_args)that);
      return false;
    }

    public boolean equals(createNewUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewUser_argsStandardSchemeFactory implements SchemeFactory {
      public createNewUser_argsStandardScheme getScheme() {
        return new createNewUser_argsStandardScheme();
      }
    }

    private static class createNewUser_argsStandardScheme extends StandardScheme<createNewUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewUser_argsTupleSchemeFactory implements SchemeFactory {
      public createNewUser_argsTupleScheme getScheme() {
        return new createNewUser_argsTupleScheme();
      }
    }

    private static class createNewUser_argsTupleScheme extends TupleScheme<createNewUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.password);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
    }

  }

  public static class createNewUser_result implements org.apache.thrift.TBase<createNewUser_result, createNewUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<createNewUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createNewUser_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createNewUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createNewUser_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createNewUser_result.class, metaDataMap);
    }

    public createNewUser_result() {
    }

    public createNewUser_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createNewUser_result(createNewUser_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public createNewUser_result deepCopy() {
      return new createNewUser_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public createNewUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public createNewUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public createNewUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createNewUser_result)
        return this.equals((createNewUser_result)that);
      return false;
    }

    public boolean equals(createNewUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(createNewUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createNewUser_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createNewUser_resultStandardSchemeFactory implements SchemeFactory {
      public createNewUser_resultStandardScheme getScheme() {
        return new createNewUser_resultStandardScheme();
      }
    }

    private static class createNewUser_resultStandardScheme extends StandardScheme<createNewUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createNewUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createNewUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createNewUser_resultTupleSchemeFactory implements SchemeFactory {
      public createNewUser_resultTupleScheme getScheme() {
        return new createNewUser_resultTupleScheme();
      }
    }

    private static class createNewUser_resultTupleScheme extends TupleScheme<createNewUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createNewUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createNewUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class removeUser_args implements org.apache.thrift.TBase<removeUser_args, removeUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUser_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUser_args.class, metaDataMap);
    }

    public removeUser_args() {
    }

    public removeUser_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUser_args(removeUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public removeUser_args deepCopy() {
      return new removeUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public removeUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUser_args)
        return this.equals((removeUser_args)that);
      return false;
    }

    public boolean equals(removeUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUser_argsStandardSchemeFactory implements SchemeFactory {
      public removeUser_argsStandardScheme getScheme() {
        return new removeUser_argsStandardScheme();
      }
    }

    private static class removeUser_argsStandardScheme extends StandardScheme<removeUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUser_argsTupleSchemeFactory implements SchemeFactory {
      public removeUser_argsTupleScheme getScheme() {
        return new removeUser_argsTupleScheme();
      }
    }

    private static class removeUser_argsTupleScheme extends TupleScheme<removeUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
    }

  }

  public static class removeUser_result implements org.apache.thrift.TBase<removeUser_result, removeUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeUser_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeUser_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeUser_result.class, metaDataMap);
    }

    public removeUser_result() {
    }

    public removeUser_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeUser_result(removeUser_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public removeUser_result deepCopy() {
      return new removeUser_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public removeUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public removeUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public removeUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeUser_result)
        return this.equals((removeUser_result)that);
      return false;
    }

    public boolean equals(removeUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeUser_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeUser_resultStandardSchemeFactory implements SchemeFactory {
      public removeUser_resultStandardScheme getScheme() {
        return new removeUser_resultStandardScheme();
      }
    }

    private static class removeUser_resultStandardScheme extends StandardScheme<removeUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeUser_resultTupleSchemeFactory implements SchemeFactory {
      public removeUser_resultTupleScheme getScheme() {
        return new removeUser_resultTupleScheme();
      }
    }

    private static class removeUser_resultTupleScheme extends TupleScheme<removeUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class updateUserPassword_args implements org.apache.thrift.TBase<updateUserPassword_args, updateUserPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserPassword_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPassword", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserPassword_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String newPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      NEW_PASSWORD((short)2, "newPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // NEW_PASSWORD
            return NEW_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("newPassword", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserPassword_args.class, metaDataMap);
    }

    public updateUserPassword_args() {
    }

    public updateUserPassword_args(
      String userName,
      String newPassword)
    {
      this();
      this.userName = userName;
      this.newPassword = newPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserPassword_args(updateUserPassword_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetNewPassword()) {
        this.newPassword = other.newPassword;
      }
    }

    public updateUserPassword_args deepCopy() {
      return new updateUserPassword_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.newPassword = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public updateUserPassword_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getNewPassword() {
      return this.newPassword;
    }

    public updateUserPassword_args setNewPassword(String newPassword) {
      this.newPassword = newPassword;
      return this;
    }

    public void unsetNewPassword() {
      this.newPassword = null;
    }

    /** Returns true if field newPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPassword() {
      return this.newPassword != null;
    }

    public void setNewPasswordIsSet(boolean value) {
      if (!value) {
        this.newPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case NEW_PASSWORD:
        if (value == null) {
          unsetNewPassword();
        } else {
          setNewPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case NEW_PASSWORD:
        return getNewPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case NEW_PASSWORD:
        return isSetNewPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserPassword_args)
        return this.equals((updateUserPassword_args)that);
      return false;
    }

    public boolean equals(updateUserPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_newPassword = true && this.isSetNewPassword();
      boolean that_present_newPassword = true && that.isSetNewPassword();
      if (this_present_newPassword || that_present_newPassword) {
        if (!(this_present_newPassword && that_present_newPassword))
          return false;
        if (!this.newPassword.equals(that.newPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_newPassword = true && (isSetNewPassword());
      list.add(present_newPassword);
      if (present_newPassword)
        list.add(newPassword);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewPassword()).compareTo(other.isSetNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPassword, other.newPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserPassword_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newPassword:");
      if (this.newPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.newPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (newPassword == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'newPassword' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserPassword_argsStandardSchemeFactory implements SchemeFactory {
      public updateUserPassword_argsStandardScheme getScheme() {
        return new updateUserPassword_argsStandardScheme();
      }
    }

    private static class updateUserPassword_argsStandardScheme extends StandardScheme<updateUserPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.newPassword = iprot.readString();
                struct.setNewPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.newPassword != null) {
          oprot.writeFieldBegin(NEW_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.newPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserPassword_argsTupleSchemeFactory implements SchemeFactory {
      public updateUserPassword_argsTupleScheme getScheme() {
        return new updateUserPassword_argsTupleScheme();
      }
    }

    private static class updateUserPassword_argsTupleScheme extends TupleScheme<updateUserPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.newPassword);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.newPassword = iprot.readString();
        struct.setNewPasswordIsSet(true);
      }
    }

  }

  public static class updateUserPassword_result implements org.apache.thrift.TBase<updateUserPassword_result, updateUserPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateUserPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateUserPassword_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateUserPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateUserPassword_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateUserPassword_result.class, metaDataMap);
    }

    public updateUserPassword_result() {
    }

    public updateUserPassword_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateUserPassword_result(updateUserPassword_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public updateUserPassword_result deepCopy() {
      return new updateUserPassword_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public updateUserPassword_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public updateUserPassword_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public updateUserPassword_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateUserPassword_result)
        return this.equals((updateUserPassword_result)that);
      return false;
    }

    public boolean equals(updateUserPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateUserPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateUserPassword_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateUserPassword_resultStandardSchemeFactory implements SchemeFactory {
      public updateUserPassword_resultStandardScheme getScheme() {
        return new updateUserPassword_resultStandardScheme();
      }
    }

    private static class updateUserPassword_resultStandardScheme extends StandardScheme<updateUserPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateUserPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateUserPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateUserPassword_resultTupleSchemeFactory implements SchemeFactory {
      public updateUserPassword_resultTupleScheme getScheme() {
        return new updateUserPassword_resultTupleScheme();
      }
    }

    private static class updateUserPassword_resultTupleScheme extends TupleScheme<updateUserPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateUserPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateUserPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class activateUser_args implements org.apache.thrift.TBase<activateUser_args, activateUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateUser_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateUser_args.class, metaDataMap);
    }

    public activateUser_args() {
    }

    public activateUser_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateUser_args(activateUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public activateUser_args deepCopy() {
      return new activateUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public activateUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateUser_args)
        return this.equals((activateUser_args)that);
      return false;
    }

    public boolean equals(activateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      return list.hashCode();
    }

    @Override
    public int compareTo(activateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateUser_argsStandardSchemeFactory implements SchemeFactory {
      public activateUser_argsStandardScheme getScheme() {
        return new activateUser_argsStandardScheme();
      }
    }

    private static class activateUser_argsStandardScheme extends StandardScheme<activateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateUser_argsTupleSchemeFactory implements SchemeFactory {
      public activateUser_argsTupleScheme getScheme() {
        return new activateUser_argsTupleScheme();
      }
    }

    private static class activateUser_argsTupleScheme extends TupleScheme<activateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
    }

  }

  public static class activateUser_result implements org.apache.thrift.TBase<activateUser_result, activateUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateUser_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateUser_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateUser_result.class, metaDataMap);
    }

    public activateUser_result() {
    }

    public activateUser_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateUser_result(activateUser_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public activateUser_result deepCopy() {
      return new activateUser_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public activateUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public activateUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public activateUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateUser_result)
        return this.equals((activateUser_result)that);
      return false;
    }

    public boolean equals(activateUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(activateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateUser_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateUser_resultStandardSchemeFactory implements SchemeFactory {
      public activateUser_resultStandardScheme getScheme() {
        return new activateUser_resultStandardScheme();
      }
    }

    private static class activateUser_resultStandardScheme extends StandardScheme<activateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateUser_resultTupleSchemeFactory implements SchemeFactory {
      public activateUser_resultTupleScheme getScheme() {
        return new activateUser_resultTupleScheme();
      }
    }

    private static class activateUser_resultTupleScheme extends TupleScheme<activateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class deactivateUser_args implements org.apache.thrift.TBase<deactivateUser_args, deactivateUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivateUser_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateUser_args.class, metaDataMap);
    }

    public deactivateUser_args() {
    }

    public deactivateUser_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateUser_args(deactivateUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public deactivateUser_args deepCopy() {
      return new deactivateUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public deactivateUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateUser_args)
        return this.equals((deactivateUser_args)that);
      return false;
    }

    public boolean equals(deactivateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      return list.hashCode();
    }

    @Override
    public int compareTo(deactivateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivateUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateUser_argsStandardSchemeFactory implements SchemeFactory {
      public deactivateUser_argsStandardScheme getScheme() {
        return new deactivateUser_argsStandardScheme();
      }
    }

    private static class deactivateUser_argsStandardScheme extends StandardScheme<deactivateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateUser_argsTupleSchemeFactory implements SchemeFactory {
      public deactivateUser_argsTupleScheme getScheme() {
        return new deactivateUser_argsTupleScheme();
      }
    }

    private static class deactivateUser_argsTupleScheme extends TupleScheme<deactivateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
    }

  }

  public static class deactivateUser_result implements org.apache.thrift.TBase<deactivateUser_result, deactivateUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<deactivateUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deactivateUser_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deactivateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deactivateUser_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deactivateUser_result.class, metaDataMap);
    }

    public deactivateUser_result() {
    }

    public deactivateUser_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deactivateUser_result(deactivateUser_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public deactivateUser_result deepCopy() {
      return new deactivateUser_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public deactivateUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public deactivateUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public deactivateUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deactivateUser_result)
        return this.equals((deactivateUser_result)that);
      return false;
    }

    public boolean equals(deactivateUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(deactivateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deactivateUser_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deactivateUser_resultStandardSchemeFactory implements SchemeFactory {
      public deactivateUser_resultStandardScheme getScheme() {
        return new deactivateUser_resultStandardScheme();
      }
    }

    private static class deactivateUser_resultStandardScheme extends StandardScheme<deactivateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deactivateUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deactivateUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deactivateUser_resultTupleSchemeFactory implements SchemeFactory {
      public deactivateUser_resultTupleScheme getScheme() {
        return new deactivateUser_resultTupleScheme();
      }
    }

    private static class deactivateUser_resultTupleScheme extends TupleScheme<deactivateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deactivateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deactivateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

  public static class authenticateUser_args implements org.apache.thrift.TBase<authenticateUser_args, authenticateUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateUser_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateUser_argsTupleSchemeFactory());
    }

    public String userName; // required
    public String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName"),
      PASSWORD((short)2, "password");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          case 2: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateUser_args.class, metaDataMap);
    }

    public authenticateUser_args() {
    }

    public authenticateUser_args(
      String userName,
      String password)
    {
      this();
      this.userName = userName;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateUser_args(authenticateUser_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public authenticateUser_args deepCopy() {
      return new authenticateUser_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
      this.password = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public authenticateUser_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public authenticateUser_args setPassword(String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      case PASSWORD:
        return getPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      case PASSWORD:
        return isSetPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateUser_args)
        return this.equals((authenticateUser_args)that);
      return false;
    }

    public boolean equals(authenticateUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userName = true && (isSetUserName());
      list.add(present_userName);
      if (present_userName)
        list.add(userName);

      boolean present_password = true && (isSetPassword());
      list.add(present_password);
      if (present_password)
        list.add(password);

      return list.hashCode();
    }

    @Override
    public int compareTo(authenticateUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateUser_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (userName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
      }
      if (password == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'password' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateUser_argsStandardSchemeFactory implements SchemeFactory {
      public authenticateUser_argsStandardScheme getScheme() {
        return new authenticateUser_argsStandardScheme();
      }
    }

    private static class authenticateUser_argsStandardScheme extends StandardScheme<authenticateUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateUser_argsTupleSchemeFactory implements SchemeFactory {
      public authenticateUser_argsTupleScheme getScheme() {
        return new authenticateUser_argsTupleScheme();
      }
    }

    private static class authenticateUser_argsTupleScheme extends TupleScheme<authenticateUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.userName);
        oprot.writeString(struct.password);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
    }

  }

  public static class authenticateUser_result implements org.apache.thrift.TBase<authenticateUser_result, authenticateUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<authenticateUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authenticateUser_result");

    private static final org.apache.thrift.protocol.TField IRE_FIELD_DESC = new org.apache.thrift.protocol.TField("ire", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ARE_FIELD_DESC = new org.apache.thrift.protocol.TField("are", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ASE_FIELD_DESC = new org.apache.thrift.protocol.TField("ase", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authenticateUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authenticateUser_resultTupleSchemeFactory());
    }

    public org.apache.airavata.userapi.error.InvalidRequestException ire; // required
    public org.apache.airavata.userapi.error.AuthorizationException are; // required
    public org.apache.airavata.userapi.error.UserAPISystemException ase; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IRE((short)1, "ire"),
      ARE((short)2, "are"),
      ASE((short)3, "ase");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // ARE
            return ARE;
          case 3: // ASE
            return ASE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IRE, new org.apache.thrift.meta_data.FieldMetaData("ire", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ARE, new org.apache.thrift.meta_data.FieldMetaData("are", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.ASE, new org.apache.thrift.meta_data.FieldMetaData("ase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authenticateUser_result.class, metaDataMap);
    }

    public authenticateUser_result() {
    }

    public authenticateUser_result(
      org.apache.airavata.userapi.error.InvalidRequestException ire,
      org.apache.airavata.userapi.error.AuthorizationException are,
      org.apache.airavata.userapi.error.UserAPISystemException ase)
    {
      this();
      this.ire = ire;
      this.are = are;
      this.ase = ase;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authenticateUser_result(authenticateUser_result other) {
      if (other.isSetIre()) {
        this.ire = new org.apache.airavata.userapi.error.InvalidRequestException(other.ire);
      }
      if (other.isSetAre()) {
        this.are = new org.apache.airavata.userapi.error.AuthorizationException(other.are);
      }
      if (other.isSetAse()) {
        this.ase = new org.apache.airavata.userapi.error.UserAPISystemException(other.ase);
      }
    }

    public authenticateUser_result deepCopy() {
      return new authenticateUser_result(this);
    }

    @Override
    public void clear() {
      this.ire = null;
      this.are = null;
      this.ase = null;
    }

    public org.apache.airavata.userapi.error.InvalidRequestException getIre() {
      return this.ire;
    }

    public authenticateUser_result setIre(org.apache.airavata.userapi.error.InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }

    public void unsetIre() {
      this.ire = null;
    }

    /** Returns true if field ire is set (has been assigned a value) and false otherwise */
    public boolean isSetIre() {
      return this.ire != null;
    }

    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }

    public org.apache.airavata.userapi.error.AuthorizationException getAre() {
      return this.are;
    }

    public authenticateUser_result setAre(org.apache.airavata.userapi.error.AuthorizationException are) {
      this.are = are;
      return this;
    }

    public void unsetAre() {
      this.are = null;
    }

    /** Returns true if field are is set (has been assigned a value) and false otherwise */
    public boolean isSetAre() {
      return this.are != null;
    }

    public void setAreIsSet(boolean value) {
      if (!value) {
        this.are = null;
      }
    }

    public org.apache.airavata.userapi.error.UserAPISystemException getAse() {
      return this.ase;
    }

    public authenticateUser_result setAse(org.apache.airavata.userapi.error.UserAPISystemException ase) {
      this.ase = ase;
      return this;
    }

    public void unsetAse() {
      this.ase = null;
    }

    /** Returns true if field ase is set (has been assigned a value) and false otherwise */
    public boolean isSetAse() {
      return this.ase != null;
    }

    public void setAseIsSet(boolean value) {
      if (!value) {
        this.ase = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.userapi.error.InvalidRequestException)value);
        }
        break;

      case ARE:
        if (value == null) {
          unsetAre();
        } else {
          setAre((org.apache.airavata.userapi.error.AuthorizationException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.userapi.error.UserAPISystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case ARE:
        return getAre();

      case ASE:
        return getAse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case ARE:
        return isSetAre();
      case ASE:
        return isSetAse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authenticateUser_result)
        return this.equals((authenticateUser_result)that);
      return false;
    }

    public boolean equals(authenticateUser_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_are = true && this.isSetAre();
      boolean that_present_are = true && that.isSetAre();
      if (this_present_are || that_present_are) {
        if (!(this_present_are && that_present_are))
          return false;
        if (!this.are.equals(that.are))
          return false;
      }

      boolean this_present_ase = true && this.isSetAse();
      boolean that_present_ase = true && that.isSetAse();
      if (this_present_ase || that_present_ase) {
        if (!(this_present_ase && that_present_ase))
          return false;
        if (!this.ase.equals(that.ase))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ire = true && (isSetIre());
      list.add(present_ire);
      if (present_ire)
        list.add(ire);

      boolean present_are = true && (isSetAre());
      list.add(present_are);
      if (present_are)
        list.add(are);

      boolean present_ase = true && (isSetAse());
      list.add(present_ase);
      if (present_ase)
        list.add(ase);

      return list.hashCode();
    }

    @Override
    public int compareTo(authenticateUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(other.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, other.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAre()).compareTo(other.isSetAre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.are, other.are);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAse()).compareTo(other.isSetAse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ase, other.ase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authenticateUser_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("are:");
      if (this.are == null) {
        sb.append("null");
      } else {
        sb.append(this.are);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ase:");
      if (this.ase == null) {
        sb.append("null");
      } else {
        sb.append(this.ase);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authenticateUser_resultStandardSchemeFactory implements SchemeFactory {
      public authenticateUser_resultStandardScheme getScheme() {
        return new authenticateUser_resultStandardScheme();
      }
    }

    private static class authenticateUser_resultStandardScheme extends StandardScheme<authenticateUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authenticateUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IRE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
                struct.ire.read(iprot);
                struct.setIreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
                struct.are.read(iprot);
                struct.setAreIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
                struct.ase.read(iprot);
                struct.setAseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authenticateUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ire != null) {
          oprot.writeFieldBegin(IRE_FIELD_DESC);
          struct.ire.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.are != null) {
          oprot.writeFieldBegin(ARE_FIELD_DESC);
          struct.are.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ase != null) {
          oprot.writeFieldBegin(ASE_FIELD_DESC);
          struct.ase.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authenticateUser_resultTupleSchemeFactory implements SchemeFactory {
      public authenticateUser_resultTupleScheme getScheme() {
        return new authenticateUser_resultTupleScheme();
      }
    }

    private static class authenticateUser_resultTupleScheme extends TupleScheme<authenticateUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authenticateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIre()) {
          optionals.set(0);
        }
        if (struct.isSetAre()) {
          optionals.set(1);
        }
        if (struct.isSetAse()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetIre()) {
          struct.ire.write(oprot);
        }
        if (struct.isSetAre()) {
          struct.are.write(oprot);
        }
        if (struct.isSetAse()) {
          struct.ase.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authenticateUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.ire = new org.apache.airavata.userapi.error.InvalidRequestException();
          struct.ire.read(iprot);
          struct.setIreIsSet(true);
        }
        if (incoming.get(1)) {
          struct.are = new org.apache.airavata.userapi.error.AuthorizationException();
          struct.are.read(iprot);
          struct.setAreIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ase = new org.apache.airavata.userapi.error.UserAPISystemException();
          struct.ase.read(iprot);
          struct.setAseIsSet(true);
        }
      }
    }

  }

}
